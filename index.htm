<!--Copyright (c) 2013 by Jerry Sy aka d0ughb0y-->
<!--mail-to: j3rry5y@gmail.com-->
<!--Commercial use of this software without-->
<!--permission is absolutely prohibited.-->
<!DOCTYPE html>
<html>
<head>
	<meta charset="utf-8">
	<title></title>
	<link rel="stylesheet" href="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.css"/>
	<script src="http://code.jquery.com/jquery-1.11.1.min.js"></script>
	<script src="http://omnipotent.net/jquery.sparkline/2.1.2/jquery.sparkline.min.js"></script>
	<script type="text/javascript">
		$(document).bind("mobileinit", function () {
			$.mobile.page.prototype.options.addBackBtn=true;
			$.mobile.page.prototype.options.backBtnTheme="c";
			$.mobile.page.prototype.options.headerTheme="a";
			$.mobile.page.prototype.options.contentTheme="c";
			$.mobile.page.prototype.options.footerTheme="a";
			$.mobile.listview.prototype.options.theme="d";
			$.mobile.collapsible.prototype.options.theme="b";
			$.mobile.collapsible.prototype.options.contentTheme="c";
			$.mobile.defaultPageTransition="slidefade";
			$.event.special.swipe.horizontalDistanceThreshold=100;
			if (localStorage.length<=1) {
				localStorage.setItem('timeout', 8000);
				localStorage.setItem('httpretries', 1);
			}
			$.ajaxSetup({
				timeout:localStorage.getItem('timeout'),
				cache:true
			});
		});
		$.fn.gauge = function(opts) {
			this.each(function() {
				var $this = $(this),
					data = $this.data();
				if (data.gauge) {
					delete data.gauge;
				}
				if (opts !== false) {
					data.gauge = new Gauge(this).setOptions(opts);
				}
			});
			return this;
		};
	</script>
	<style type="text/css">
		#Outlets .ui-li, #Inputs .ui-li, #outloglist .ui-li, #sensorloglist .ui-li, #loglist .ui-li  {
			padding-bottom: 0;
			padding-top: 0;
			font-weight: normal;
		}
		#sensorloglist .ui-block-a, #outloglist .ui-block-a { width: 55%; }
		#outloglist .ui-block-b { width: 35%; }
		#outloglist .ui-block-c { width: 10%; }
    #loglist .ui-li { font-size: small; }
		.tooltip {
			display: none;
			font-size: 10pt;
			position: absolute;
			border: 1px solid #000000;
			background-color: #FFFFE0;
			padding: 2px 6px;
			color: #990000;
		}
		.sensor {
			width: 70%;
			min-width: 200px;
			max-width: 400px;
			height: 65px;
			float: left;
		}
		.sensor_name {
			height: 20px;
			font-size: large;
		}
		.sensor_spark {
			height: 30px;
		}
		.sensor_mma {
			height: 15px;
			font-size: small;
		}
		.sensor2 {
			width: 80px;
			height: 65px;
			float: right;
		}
		.sensor_value {
			height: 50px;
			font-size: 36px;
			line-height: 60px;
			text-align: center;
		}
		.sensor_sg {
			height: 15px;
			font-size: small;
			text-align: center;
		}
		.pump {
			width: 90%;
			height: 65px;
		}
		.pump_info {
			height: 20px;
			font-size: large;
		}
		.pump_spark {
			height: 30px;
		}
		.pump_footer {
			height: 15px;
			font-size: small;
		}
		.doser_bar {
			width:70%;
			height:30px;
			float: right;
		}
		.doser_info {
			height:15px;
			font-size:small;
			text-align: center;
		}
		.doser_name {
			width:30px;
			height: 30px;
			font-size: large;
			float: left;
		}
		.perc {
			/*width: 120px;*/
			height: 20px;
			border: 1px solid blue;
			position: relative;
		}
		.perc_in {
			position: absolute;
			background: #0FF;
			top: 0;
			left: 0;
			height: 100%;
		}
		.perc_txt {
			position: absolute;
			top: 0;
			left: 0;
			width: 100%;
			height: 100%;
			font-size: medium;
			text-align: center;
			z-index: 100;
		}
		#PWMFans .ui-li {
			padding-left:0;
			padding-right:0;
			margin: 0;
		}
		.pwmfanleft {
			text-align: center;
			width: 100px;
			height:90px;
			float:left;
		}
		.pwmfanright {
			overflow:hidden;
			text-align: center;
			width:200px;
			height: 90px;
		}
	</style>
	<script src="http://code.jquery.com/mobile/1.3.2/jquery.mobile-1.3.2.min.js"></script>
	<script src="https://cdn.rawgit.com/bernii/gauge.js/gh-pages/dist/gauge.min.js"></script>
	<meta content="width=device-width, minimum-scale=1, maximum-scale=1" name="viewport"/>
	<meta name="apple-mobile-web-app-capable" content="yes"/>
	<meta name="apple-mobile-web-app-status-bar-style" content="black"/>
</head>
<body>
<div data-role="page" id="page">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<a href="#setup" data-role="button" data-icon="gear" data-iconpos="notext" class="ui-btn-left" data-iconshadow="false"></a>
		<h1 id="hostname"></h1>
		<a data-role="button" data-icon="refresh" data-iconpos="notext" data-iconshadow="false" class="ui-btn-right" onClick="lastupdatetime=new Date(0);updateStatus(true);"></a>
	</div>
	<div data-role="content">
		<div data-role="collapsible-set" data-inset="false">
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false" id="SensorBar" data-collapsed="false">
				<h2>Sensors</h2>
				<ul data-role="listview" id="Sensors"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false" id="OutletsBar">
				<h2>Outlets</h2>
				<ul data-role="listview" id="Outlets"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false" id="InputsBar">
				<h2>Inputs</h2>
				<ul data-role="listview" id="Inputs"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false"id="PWMPumpsBar">
				<h2>PWM Pumps</h2>
				<ul data-role="listview" id="PWMPumps"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d"	data-inset="false" id="PWMFansBar">
				<h2>PWM Fans</h2>
				<ul data-role="listview" id="PWMFans"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d"	data-inset="false"id="DosersBar">
				<h2>Dosing Pumps</h2>
				<ul data-role="listview" id="Dosers"></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d"	data-inset="false"id="LEDsBar">
				<h2>LEDs</h2>
				<ul data-role="listview" id="LEDs"><li>Coming soon ...</li></ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false" style="text-decoration:none" id="MacrosBar">
				<h2>Feed</h2>
				<div data-role="controlgroup">
					<button onClick="setFeed(0);" value="Feed A" id="feed1"/>
					<button onClick="setFeed(1);" value="Feed B" id="feed2"/>
					<button onClick="setFeed(2);" value="Feed C" id="feed3"/>
					<button onClick="setFeed(3);" value="Feed D" id="feed4"/>
					<button onClick="setFeed(4);" value="Feed Cancel" id="feedcancel"/>
				</div>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false" id="webcam">
				<h2>WebCam</h2>
				<img id="camImg" width="290px" src=""/>
				<button onClick="startPlay();" id="playbtn">Play</button>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false">
				<h2>Logs and Setup</h2>
				<ul data-role="listview">
					<li><a href="#outlog">Outlet Log</a></li>
					<li><a href="#sensorlog">Sensor Log</a></li>
					<li><a href="#log">Controller Log</a></li>
					<li><a href="#-" id="filemanager">File Manager</a></li>
					<li><a href="#csetup">Controller Setup</a></li>
				</ul>
			</div>
			<div data-role="collapsible" data-collapsed-icon="arrow-r" data-expanded-icon="arrow-d" data-inset="false">
				<h2>Apex Info</h2>
				<div data-role="listview">
					<li>Software<span class="ui-li-aside" id="software">1.0</span></li>
					<li>Hardware<span class="ui-li-aside" id="hardware">1.0</span></li>
					<li>Serial<span class="ui-li-aside" id="serial">1.0</span></li>
					<li>Timezone<span class="ui-li-aside" id="timezone">1.0</span></li>
					<li data-role="list-divider">Power</li>
					<li>Failed<span class="ui-li-aside" id="powerfailed">none</span></li>
					<li>Restored<span class="ui-li-aside" id="powerrestored">none</span></li>
				</div>
			</div>
		</div>
	</div>
	<div data-role="footer" data-position="fixed" data-tap-toggle="false">
		<a href="#info" data-role="button" data-icon="info" data-iconpos="notext" class="ui-btn-left" data-iconshadow="false"></a>
		<h1 id="footertxt"></h1>
		<a href="#doc" data-role="button" data-icon="search" data-iconpos="notext" class="ui-btn-right" data-iconshadow="false"></a>
	</div>
</div>
<div data-role="page" id="outlog">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>Outlet Log</h1>
	</div>
	<div data-role="content">
		<ul data-role="listview" data-filter="true" id="outloglist"></ul>
	</div>
</div>
<div data-role="page" id="sensorlog">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>Sensor Log</h1>
	</div>
	<div data-role="content">
		<ul data-role="listview" data-filter="true" id="sensorloglist"></ul>
	</div>
</div>
<div data-role="page" id="doc">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>Documentation</h1>
	</div>
	<div data-role="content" id="doccontents">
		<p>m-apex (or mobile apex) was written as a supplement to the Apex app for smartphones. You can edit the html source
			to your liking.</p>
		<p>Unlike the Apex app, this does not continuously connect to the apex to get data. Other than the initial
			connection to get the html page and load the initial data, this program does not consume any data bandwidth until
			you click on the refresh button or view a section or log. This works better for smartphones without unlimited data
			plan.</p>
		<div data-role="collapsible-set">
			<div data-role="collapsible">
				<h2>Setup</h2>
				<p>This program will work as is with the default Setup values.</p>
				<p>If you use a webcam on your aquarium, you can enter the URL to retrieve a jpg or mjpeg image.</p>
				<p>For Foscam compatible cameras, use this URL for image http://host:port/snapshot.cgi and this URL for server
					push mjpeg http://host:port/videostream.cgi?resolution=8&rate=11</p>
				<p><strong>Do not use server push if you do not have unlimited data plan on your mobile device!!!</strong></p>
				<p>The Connection Timeout is the number of seconds before the browser will disconnect if Apex does not respond,
					and Connection Retries is the number of times to retry in case of a failed connection. A spinner status will
					be displayed during a connection, and the retry attempt number is displayed if applicable.</p>
				<p>You must click on the Save button at the top right of the page to save the values you entered.</p>
			</div>
			<div data-role="collapsible">
				<h2>Header</h2>
				<p>The header section displays the Apex Host name in the center, with the Setup button to the left, and Refresh
					button to the right. The Refresh button updates the Sensors and Outlets section if they are expanded.</p>
			</div>
			<div data-role="collapsible">
				<h2>Sensors</h2>
				<p>This section displays all your Apex sensors (probes) and their values. A chart of the last 24 hours is
					displayed, with the min, max and avg values shown below. If you have a Conductivity probe and it returns
					salinity values, the calculated specific gravity value will be displayed under the salinity value.</p>
			</div>
			<div data-role="collapsible">
				<h2>Outlets</h2>
				<p>This displays all the outlets defined on your Apex and allows you to manually turn On or Off the outlet.</p>
				<p>The outlet name is color coded as follows: green = On, red = off, blue = Unknown and orange = Profile.</p>
				<p>For outlets running on a profile, if you tap the outlet name, the profile name will display as a tooltip.</p>
				<p>When you click on On or Off, only the outlet command is sent to the Apex.</p>
				<p>If you click on the Auto button, an Update command is sent 600ms later to retrieve the outlet status so the
					appropriate outlet name color can be applied.</p>
			</div>
			<div data-role="collapsible">
				<h2>Inputs</h2>
				<p>This section displays all the input switch states.</p>
			</div>
			<div data-role="collapsible">
				<h2>Feed</h2>
				<p>This section allows you to execute the Feed modes defined on the Apex. When you exectue a Feed program, the
					feed buttons will be disabled and a countdown timer will display the remaining time on the feed program
					currently running.</p>
			</div>
			<div data-role="collapsible">
				<h2>WebCam</h2>
				<p>If you entered a webcam image url in the Setup section, this will display an image from the webcam.</p>
				<p>If you click on the Play button, it will play 15 frames 500ms apart to simulate a short video clip if the url
					is to a jpg image. If the url is a videostream, then it starts playing the live webcam video.</p>
			</div>
			<div data-role="collapsible">
				<h2>Apex Logs and Setup</h2>
				<p>This section allows you to view Apex Outlet Log and Sensor Data Log. The log list is filterable to show only
					lines that matches the search characters you type in.</p>
				<p>For Outlet Log, switch your smartphone to landscape orientation if you have outlets running on profiles to
					see the profile name. </p>
				<p>You can also open the Apex Outlets setup page, the Apex Profiles setup page and the full Apex page in a new
					browser window in this section.</p>
			</div>
			<div data-role="collapsible">
				<h2>Apex Info</h2>
				<p>This section displays miscellaneous information about your Apex device.</p>
			</div>
			<div data-role="collapsible">
				<h2>Footer</h2>
				<p>The center displays the timestamp the Outlets section was updated. The Info button is on the left and
					Documentation button is on the right.</p>
			</div>
		</div>
	</div>
</div>
<div data-role="page" id="info">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>m-apex v1.05</h1>
	</div>
	<div data-role="content">
		<h2>Software License Agreement</h2>
		<p>BEFORE INSTALLING THIS SOFTWARE, YOU SHOULD CAREFULLY READ THE FOLLOWING TERMS AND CONDITIONS. INSTALLING THE
			SOFTWARE INDICATES YOUR ACCEPTANCE OF THE TERMS AND CONDITIONS. IF YOU DO NOT AGREE TO THE TERMS OF THIS
			AGREEMENT, DO NOT INSTALL THE SOFTWARE. </p>
		<p>The owner of m-apex licenses its software (hereinafter referred to as the "Software", including any accompanying
			documentation) to you only upon the condition that you accept all of the terms contained in this license agreement
			("Agreement"). </p>
		<div data-role="collapsible-set">
			<div data-role="collapsible">
				<h2>GRANT OF USE.</h2>
				<p>Software is copyrighted and title to Software and all associated intellectual property rights are retained by
					Jerry Sy (hereinafter referred to as the "owner"). Software is confidential information of the owner.<BR> <BR>
					The owner grants you a non-exclusive license to use the software in personal or non commercial purposes.<BR>
					<BR> You may not remove or obscure any copyright and trademark notices relating to the Software.<BR> <BR> You
					may not reverse engineer, decompile, or disassemble the Software, except and only to the extent that such
					activity is expressly permitted by applicable law notwithstanding this limitation.<BR> <BR> You may not
					sub-license, transfer, assign or distribute the Software or any of your rights or obligations under this
					License Agreement, in whole or in part. </p>
			</div>
			<div data-role="collapsible">
				<h2>TERM AND TERMINATiON</h2>
				<p>This Agreement is effective until terminated. You may terminate this Agreement at any time by destroying all
					copies of Software. This Agreement will terminate immediately without notice from the owner if you fail to
					comply with any provision of this Agreement. Upon termination, you must destroy all copies of Software. </p>
			</div>
			<div data-role="collapsible">
				<h2>DiSCLAIMER OF WARRANTY</h2>
				<p>The Software is provided "AS IS" WITHOUT WARRANTY OF ANY KIND EITHER EXPRESS OR IMPLIED, INCLUDING BUT NOT
					LIMITED TO THE IMPLIED WARRANTY OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE. </p>
			</div>
			<div data-role="collapsible">
				<h2>LIMITATION OF LIABILITY</h2>
				<p><strong>NO LIABILITY FOR CONSEQUENTIAL DAMAGES.</strong> THE ENTIRE RISK ARISING OUT OF THE USE OR
					PERFORMANCE OF THIS SOFTWARE AND DOCUMENTATION REMAINS WITH YOU. IN NO EVENT WILL THE OWNER BE LIABLE FOR ANY
					LOST PROFITS, LOST SAVINGS, INCIDENTAL OR INDIRECT DAMAGES OR OTHER ECONOMIC CONSEQUENTIAL DAMAGES, EVEN IF
					THE OWNER OR ITS AUTHORIZED SUPPLER HAS BEEN ADVISED OF THE POSSIBILITY OF SUCH DAMAGES. IN ADDITION THE OWNER
					AND ITS SUPPLIERS WILL NOT BE LIABLE FOR ANY DAMAGES CLAIMED BY YOU BASED ON ANY THIRD PARTY CLAIM.<BR> <BR>
					Some jurisdictions do not allow the exclusion of implied warranties, or the limitation for consequential
					damages, so the above may not apply to you. </p>
			</div>
			<div data-role="collapsible">
				<h2>COPYRIGHT</h2>
				<p>Contents of this file, program code, concepts, and user interfaces are &copy; 2013 and beyond by Jerry
					Sy.<BR> <br> Nepture Apex is trademarked and copyrighted by Neptune Systems.<BR>
				</p>
			</div>
			<div data-role="collapsible">
				<h2>CREDITS</h2>
				<p>Thanks to Russ Michel for providing access to his Apex for testing and development.<br> <br> This program
					uses jQuery, jQuery Mobile, sparkline.</p>
			</div>
			<div data-role="collapsible">
				<h2>AUTHOR</h2>
				<p>You may contact the author to provide comments, suggestions and bug report about this program or request
					program customization. Contact via <a href="mailto:j3rry5y@gmail.com">email</a> or via IM at
					<a target="_blank" href="http://www.reefcentral.com/forums/member.php?u=186039">d0ughb0y@ReefCentral</a> or
					<a target="_blank" href="http://www.reef2reef.com/forums/member.php?u=11889">doughboy@Reef2Reef.</a>
				</p>
			</div>
		</div>
	</div>
</div>
<div data-role="page" id="setup">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h2>Setup</h2>
		<a data-role="button" class="ui-btn-right" data-theme="c" data-icon="check" data-iconpos="right" onClick="saveSetup();">Save</a>
	</div>
	<div data-role="content">
		<div data-role="fieldcontain">
			<label for="webcamurl">Webcam Image URL:</label>
			<input type="url" name="textinput2" id="webcamurl" value="" data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="webcamname">Webcam Login:</label>
			<input type="text" name="textinput3" id="webcamname" value="" data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="webcampass">Webcam Password:</label>
			<input type="password" name="passwordinput2" id="webcampass" value="" data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="httptimeout">Connection Timeout in seconds:</label>
			<input type="range" name="slider" id="httptimeout" value="10" min="5" max="15" data-highlight="false" data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="httpretries">Connection Retries:</label>
			<input type="range" name="slider1" id="httpretries" value="1" min="0" max="5" data-highlight="false" data-mini="true"/>
		</div>
	</div>
</div>
<div data-role="page" id="log">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>Controller Log</h1>
	</div>
	<div data-role="content">
		<ul data-role="listview" id="loglist" data-filter="true"></ul>
	</div>
	<div data-role="footer" data-position="fixed" data-tap-toggle="false">
		<h1 id="logfooter"></h1>
	</div>
</div>
<div data-role="page" id="csetup">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1>Controller Setup</h1>
	</div>
	<div data-role="content">
		<ul data-role="listview" id="csetupitemlist">
			<li><a href="#csform">Outlets</a></li>
			<li><a href="#csform">Macros</a> </li>
			<li><a href="#csform">Actions</a></li>
			<li><a href="#csform">PWM Pumps</a></li>
			<li><a href="#csform">PWM Fans</a></li>
			<li><a href="#csform">Dosers</a></li>
			<li><a href="#csform">Sensors</a> </li>
			<li><a href="#csform">LEDs</a></li>
			<li><a href="#csform">Misc</a></li>
		</ul>
	</div>
</div>
<div data-role="page" id="csform">
	<div data-role="header" data-position="fixed" data-tap-toggle="true">
		<a data-role="button" class="ui-btn-right" data-theme="c" data-icon="check" data-iconpos="right" onClick="saveconfig();">Save</a>
		<h1 id="csformhdr">Controller Setup</h1>
	</div>
	<div data-role="content">
		<div id="contentoutlets">
			<label for="selectrec" class="select">Name:</label>
			<select name="selectmenu" id="selectrec" data-mini="true"></select>
			<label for="initoff">Initial Off Time (hh:mm:ss):</label>
			<input type="text" name="initoff" id="initoff" value=""	data-mini="true"	pattern="^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"/>
			<label for="ontime">On Time	(hh:mm:ss):</label>
			<input type="text" name="ontime" id="ontime" value="" data-mini="true"	pattern="^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"/>
			<label for="offtime">Off Time	(hh:mm:ss):</label>
			<input type="text" name="offtime" id="offtime" value="" data-mini="true"	pattern="^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"/>
			<label for="cycletime">Cycle Time (hh:mm:ss):</label>
			<input type="text" name="cycletime" id="cycletime" value="" readonly data-mini="true"	pattern="^([01][0-9]|2[0-4]):[0-5][0-9]:[0-5][0-9]$"/>
			<label for="days" class="select">Active Days:</label>
			<select name="days" id="days" multiple data-native-menu="false" data-mini="true">
				<option value="1">Sun</option>
				<option value="2">Mon</option>
				<option value="3">Tue</option>
				<option value="4">Wed</option>
				<option value="5">Thu</option>
				<option value="6">Fri</option>
				<option value="7">Sat</option>
			</select>
			<label for="mode" class="select">Mode:</label>
			<select name="mode" id="mode" data-mini="true">
			<option value="0">Auto</option>
			<option value="1" disabled>Manual</option>
			<option value="2">Disabled</option>
			<option value="3" disabled>Macro</option>
		</select>
		<label for="inverse">Inverse Cycle:</label>
		<input type="checkbox" name="inverse" id="inverse" value="" data-mini="true"/>
		</div>
		<div id="contentactions">
			<label for="selectmacro" class="select">Name:</label>
			<select name="selectmacro" id="selectmacro" data-mini="true"> </select>
			<ul data-role="listview" id="actionlist" style="margin-top:10px"></ul>
		</div>
		<div id="contentpumps">
			<div data-role="navbar" id="pumpnav" data-mini="true">
			</div>
			<div data-role="content">
				<div>
					<ul data-role="listview" id="pumpprogramlist">
					</ul>
				</div>
			</div>
		</div>
		<div id="contentpwmfans">
			<div data-role="navbar" id="pwmfannav" data-mini="true">
				<ul>
					<li><a href="#" class="ui-btn-active-ui-state-persist" id="pwmfannav0">Fan 0</a> </li>
					<li><a href="#" id="pwmfannav1">Fan 1</a> </li>
					<li><a href="#" id="pwmfannav2">Fan 2</a> </li>
				</ul>
			</div>
			<div data-role="content" id="_pwmfancontent">
				<div data-role="fieldcontain" data-mini="true">
					<label for="_fanname" data-mini="true" style="width:80%">Fan Name:</label>
					<input data-mini="true" type="text" name="_fanname" id="_fanname" maxlength="7" pattern="[a-zA-Z0-9]+"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_fanmaxrpm" data-mini="true" style="width:80%">Max RPM:</label>
					<input data-mini="true" type="number" name="_fanmaxrpm" id="_fanmaxrpm" step="1"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_fantemp" data-mini="true" style="width:80%">Temp Sensor:</label>
					<input data-mini="true" type="number" name="_fantemp" id="_fantemp" min="0"/>
				</div>
				<div data-role="rangeslider" data-mini="true">
					<label for="_fantemplow" data-mini="true" style="width: 80%">Temp Range:</label>
					<input name="_fantemplow" id="_fantemplow" min="70" max="100" step="1" value="75"	data-mini="true" type="range"/>
					<input name="_fantemohigh" id="_fantemphigh" min="70" max="100" step="1" value="80" data-mini="true"	type="range"/>
				</div>
				<div data-role="rangeslider" data-mini="true" id="_fanlevelrange">
					<label for="_fanlevellow" data-mini="true" style="width: 80%">Duty Cycle Ramp:</label>
					<input name="_fanlevellow" id="_fanlevellow" min="30" max="100" step="1" value="30" data-mini="true"	type="range"/>
					<input name="_fanlevelhigh" id="_fanlevelhigh" min="30" max="100" step="1" value="100" data-mini="true"	type="range"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_fanalarm" data-mini="true" style="width: 80%">Alarm if Stalled</label>
					<input type="checkbox" name="inverse" id="_fanalarm" value="" data-mini="true"/>
				</div>
			</div>
		</div>
		<div id="contentdosers">
			<div data-role="navbar" id="dosernav" data-mini="true">
				<ul>
					<li><a href="#" class="ui-btn-active-ui-state-persist" id="dosernav0">Doser 0</a> </li>
					<li><a href="#" id="dosernav1">Doser 1</a> </li>
					<li><a href="#" id="dosernav2">Doser 2</a> </li>
					<li><a href="#" id="dosernav3">Doser 3</a> </li>
				</ul>
			</div>
			<div data-role="content">
				<div data-role="fieldcontain" data-mini="true">
					<label for="_dosername" data-mini="true" style="width:80%">Name:</label>
					<input data-mini="true" type="text" name="_dosername" id="_dosername" maxlength="7"	pattern="[a-zA-Z0-9]+"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_doserdd" data-mini="true">Daily Dose (ml):</label>
					<input data-mini="true" type="number" name="_doserdd" id="_doserdd" min="1"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_doserdpd" data-mini="true">Doses per Day:</label>
					<select id="_doserdpd" name="_doserdpd" data-mini="true">
						<option value="0">Disabled</option>
						<option value="1">1</option>
						<option value="2">2</option>
						<option value="4">4</option>
						<option value="6">6</option>
						<option value="12">12</option>
						<option value="24">24</option>
						<option value="48">48</option>
						<option value="96">96</option>
						<option value="144">144</option>
					</select>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_doserint" data-mini="true">Interval:</label>
					<select id="_doserint" data-mini="true" name="_doserint">
						<option value="0">Auto</option>
						<option value="30">30</option>
						<option value="60">60</option>
						<option value="120">120</option>
						<option value="240">240</option>
					</select>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_doserst" data-mini="true">Start Time (hh:mm):</label>
					<input data-mini="true" type="time" name="_doserst" id="_doserst" min="0" max="1439"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_doserfv" data-mini="true">Full Volume (ml):</label>
					<input data-mini="true" type="number" name="_doserfv" id="_doserfv" min="1"/>
				</div>
				<h4 style="text-align: center">Calibrate</h4>
				<a href="#_dosercalibrate" data-rel="dialog" data-role="button" id="dcalstart" data-mini="true" data-theme="c">Start	Calibration</a>
			</div>
		</div>
		<div id="contentsensors">
			<div data-role="navbar" id="sensornav" data-mini="true">
			</div>
			<div data-role="content">
				<div data-role="fieldcontain" data-mini="true">
					<label for="_sensorlowalert" data-mini="true">Low Alert:</label>
					<input data-mini="true" type="number" step="any" name="_sensorlowalert" id="_sensorlowalert"/>
				</div>
				<div data-role="fieldcontain" data-mini="true">
					<label for="_sensorhighalert" data-mini="true">High Alert:</label>
					<input data-mini="true" type="number" step="any" name="_sensorhighalert" id="_sensorhighalert"/>
				</div>
				<div id="_sensorphcalibrate">
					<h4 style="text-align: center">Calibrate</h4>
					<label for="_sensorphvalue" data-mini="true">Sensor Reading:</label>
					<input data-mini="true" name="_sensorphvalue" id="_sensorphvalue" readonly/>
					<button data-mini="true" id="_sensorphreset"	onclick="csutil({'cmd':'reset','type':'1','value':''+sensoridx-numtemp});">Reset</button>
					<button data-mini="true" id="_sensorphcal7"	onclick="csutil({'cmd':'cal_mid_7.00','type':'1','value':''+sensoridx-numtemp});">Cal,Mid,7.00</button>
					<button data-mini="true" id="_sensorphcal4"	onclick="csutil({'cmd':'cal_low_4.00','type':'1','value':''+sensoridx-numtemp});">Cal,Low,4.00</button>
					<button data-mini="true"	id="_sensorphcal10"onclick="csutil({'cmd':'cal_high_10.00','type':'1','value':''+sensoridx-numtemp});">Cal,High,10.00</button>
				</div>
				<div id="_sensororpcalibrate">
					<h4 style="text-align: center">Calibrate</h4>
					<label for="_sensororpvalue" data-mini="true">Sensor Reading (mv):</label>
					<input data-mini="true" name="_sensororpvalue" id="_sensororpvalue" readonly/>
					<button data-mini="true" id="_sensororpreset"	onclick="csutil({'cmd':'reset','type':'2','value':'0'});">Reset</button>
					<button data-mini="true" id="_sensororpcalezo"	onclick="csutil({'cmd':'cal_225','type':'2','value':'0'});">Calibrate EZO 225</button>
					<button data-mini="true"	id="_sensororpcalminus" onclick="csutil({'cmd':'cal_-','type':'2','value':'0'});">Calibrate -</button>
					<button	data-mini="true" id="_sensororpcalplus"onclick="csutil({'cmd':'cal_+','type':'2','value':'0'});">Calibrate	+</button>
				</div>
				<div id="_sensorcondcalibrate">
					<h4 style="text-align: center">Calibrate</h4>
					<label for="_sensorcondvalue" data-mini="true">Sensor Reading (us):</label>
					<input data-mini="true" name="_sensorcondvalue" id="_sensorcondvalue" readonly/>
					<button data-mini="true" id="_sensorcondreset"	onclick="csutil({'cmd':'reset','type':'3','value':'0'});">Reset</button>
					<button data-mini="true" id="_sensorcondcaldry"	onclick="csutil({'cmd':'cal_dry','type':'3','value':'0'});">Cal,Dry</button>
					<button data-mini="true" id="_sensorcondcalone"	onclick="csutil({'cmd':'cal_one_53000','type':'3','value':'0'});">Cal,One,53000</button>
					<button data-mini="true" id="_sensorcondcallow"	onclick="csutil({'cmd':'cal_low_12880','type':'3','value':'0'});">Cal,Low,12880</button>
					<button data-mini="true" id="_sensorcondcalhigh"	onclick="csutil({'cmd':'cal_high_80000','type':'3','value':'0'});">Cal,High,80000</button>
					<button data-mini="true" id="_sensorcondcalhigh2"	onclick="csutil({'cmd':'cal_high_150000','type':'3','value':'0'});">Cal,High,150000</button>
				</div>
			</div>
		</div>
		<div id="contentleds">
			<h1>Coming Soon...</h1>
		</div>
		<div id="contentmisc">
			<h4 style="text-align:center">Temp Control</h4>
			<section class="ui-grid-b">
				<div class="ui-block-a">Heater:</div>
				<div class="ui-block-b"><input type="number" step="any" id="htrlow" data-mini="true" value=""/></div>
				<div class="ui-block-c"><input type="number" step="any" id="htrhigh" data-mini="true" value=""/></div>
				<div class="ui-block-a">Fan:</div>
				<div class="ui-block-b"><input type="number" step="any" id="fanlow" data-mini="true" value=""/></div>
				<div class="ui-block-c"><input type="number" step="any" id="fanhigh" data-mini="true" value=""/></div>
			</section>
			<h4 style="text-align:center">Sonar Alert</h4>
			<section class="ui-grid-b">
				<div class="ui-block-a">Range (cm):</div>
				<div class="ui-block-b"><input type="number" id="sonarlow" data-mini="true" value=""/></div>
				<div class="ui-block-c"><input type="number" id="sonarhigh" data-mini="true" value=""/></div>
				<div class="ui-block-a">Low Alert Value (cm):</div>
				<div class="ui-block-b"><input type="number" id="sonaralertval" data-mini="true" value=""/></div>
				<div class="ui-block-c"><input type="text" readonly id="sonarval" data-mini="true" value=""/></div>
			</section>
			<div><label for="sonaralert">Sonar Alert</label><input type="checkbox" id="sonaralert"/></div>
			<h4 style="text-align:center">Alerts</h4>
			<section class="ui-grid-a">
				<div class="ui-block-a"><label for="sndalert">Sound</label><input type="checkbox" id="sndalert"/></div>
				<div class="ui-block-b"><label for="emailalert">Email</label><input type="checkbox" id="emailalert"/>
				</div>
			</section>
			<label for="resetconf">Reset:</label> <input type="number" id="resetconf" data-mini="true" value=""/>
		</div>
	</div>
</div>
<div data-role="page" id="editaction">
	<div data-role="header">
		<h1>Edit Action</h1>
	</div>
	<div data-role="content">
		<label for="editoutlet">Outlet:</label>
		<input type="number" name="editoutlet" id="editoutlet" value="" data-mini="true"/> <label for="editoff">Init	Off:</label>
		<input type="number" name="editoff" id="editoff" value="" data-mini="true"/>
		<label for="editon">On	Time:</label> <input type="number" name="editon" id="editon" value="" data-mini="true"/>
		<button onClick="saveaction();" data-mini="true">Save</button>
	</div>
</div>
<div data-role="page" id="pumpprogramedit">
	<div data-role="header">
		<h1>Pump Program</h1>
	</div>
	<div data-role="content">
		<label for="_wavemode" class="select">Wave Mode:</label>
		<select name="_wavemode" id="_wavemode" data-mini="true">	</select>
		<label for="_syncmode" class="select">Sync Mode:</label>
		<select name="_syncemode" id="_syncmode" data-mini="true">
			<option value="0">Master</option>
			<option value="1">Sync</option>
			<option value="2">Anti-Sync</option>
		</select>
		<div data-role="fieldcontain">
			<label for="_level">Max Speed:</label>
			<input type="range" name="_slider2" id="_level" value="50" min="0" max="100" step="1"	data-highlight="true"	data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="pulsewidth">Pulse Width:</label>
			<input type="range" name="_slider3" id="_pulsewidth" value="10" min="0" max="10" step="1"	data-highlight="true"	data-mini="true"/>
		</div>
		<button onclick="savePumpProgram();" data-mini="true">Save</button>
	</div>
</div>
<div data-role="page" id="pwmpage">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1 id="pumpname"></h1>
	</div>
	<div data-role="content" id="pwmpagecontent">
		<label for="wavemode" class="select">Wave Mode:</label>
		<select name="wavemode" id="wavemode" data-mini="true">	</select>
		<label for="syncmode" class="select">Sync Mode:</label>
		<select name="syncemode" id="syncmode" data-mini="true">
			<option value="0">Master</option>
			<option value="1">Sync</option>
			<option value="2">Anti-Sync</option>
		</select>
		<div data-role="fieldcontain">
			<label for="level">Max Speed:</label>
			<input type="range" name="slider2" id="level" value="50" min="0" max="100" step="1"	data-highlight="true"	data-mini="true"/>
		</div>
		<div data-role="fieldcontain">
			<label for="pulsewidth">Pulse Width:</label>
			<input type="range" name="slider3" id="pulsewidth" value="10" min="0" max="10" step="1"	data-highlight="true"	data-mini="true"/>
		</div>
		<div data-role="controlgroup" data-type="horizontal" data-mini="true"  style="text-align: center">
			<input name="pumpauto" id="pumpauto" value="1" checked type="radio" data-mini="true">
			<label for="pumpauto">Auto</label>
			<input name="pumpauto" id="pumpmanual" value="0" type="radio" data-mini="true">
			<label for="pumpmanual">Manual</label>
		</div>
	</div>
</div>
<div data-role="page" id="doserpage">
	<div data-role="header" data-position="fixed" data-tap-toggle="false">
		<h1 id="dosername"></h1>
	</div>
	<div data-role="content" id="dosercontent">
		<div data-role="fieldcontain" data-mini="true">
		<label for="_dosevolume" data-mini="true">Volume to dose (min 0.1ml):</label>
		<input type="text"  pattern="[0-9.]+" name="_dosevolume" id="_dosevolume" data-mini="true" value=""/>
		<button onclick="doserCommand('mdose');" data-mini="true">Manual Dose</button>
		</div>
		<div data-role="fieldcontain" data-mini="true">
		<label for="_setdosedvolume" data-mini="true">Dosed Volume in ml:</label>
		<input type="number" name="_setdosedvolume" id="_setdosedvolume" data-mini="true" value=""/>
		<button onclick="doserCommand('setdv');" data-mini="true">Set</button>
		</div>
	</div>
</div>
<div data-role="page" id="_dosercalibrate">
	<div data-role="header">
		<h1 id="_dosercalibratehdr"></h1>
	</div>
	<div data-role="content">
		<label for="_dosercalvol">Calibration Volume (ml):</label>
		<input type="number" name="_dosercalvol" id="_dosercalvol" value="5" data-mini="true" min="1" max="5"/>
		<label for="_dosercaltotaltime">Current Total Time Units:</label>
		<input type="number" name="_dosercaltotaltime" id="_dosercaltotaltime" value="0" data-mini="true" readonly/>
		<label for="_dosercaltime" data-mini="true">ON Time Units (1 unit=1.02ms, min=98, max=5000):</label>
		<input type="number" name="_dosercaltime" id="_dosercaltime" value="" min="100" max="5000" step="1"	data-mini="true"/>
		<button onclick="doserCommand('cstart');" data-mini="true" id="_dosercalstart">Start</button>
		<button onclick="doserCommand('cadj');" data-mini="true" id="_dosercaladjust">+Dose</button>
		<button onclick="doserCommand('csave');" data-mini="true" id="_dosercalsave">Save</button>
		<button onclick="doserCommand('ctest');" data-mini="true" id="_dosercaltest">Test</button>
		<button onclick="doserCommand('cabort');" data-mini="true" id="_dosercalabort">Cancel</button>
	</div>
</div>
<script type="text/javascript">
var retry=0;
var maxretries=localStorage.getItem('httpretries');
var initialized=false;
var lastupdatetime=new Date(0);
var sensoropen=false;
var imageupdatecount=0;
var sensordata={names:[], record:[]};
var outlogdata={record:[]};
var feedactive=false;
var feedexpanded=false;
var feedcounter=0;
var feedname=0;
var feedtimeoutfunction;
var feedactivefunction;
var logpath="";
var config={};
var macros=[];
var outletname=[];
var action=[];
var gaugesinitialized=false;
var pwmfansopen=false;
var pwmfanidx = 0;
var pwmfanmaxrpm=[];
var pwmpumpsopen=false;
var updatewavefunction;
var pwmbarwidth=6;
var pwmpumpsconfig=[];
var pwmpumpsidx=0;
var pwmpumpspgmitem=-1;
var wavedef=[];
var csitem=-1;
var inputsopen=false;
var dosersopen=false;
var dosers = [];
var doseridx=0;
var sensoridx=0;
var numtemp=0;
var csutilfunction;
var hassonar=false;
$("#page").on('pagecreate', function(e){
}).on('pageinit',function(e){
	initHome();
}).on('pagebeforeshow',function(e){
 if (initialized)  updateStatus();
}).on("pageshow", function(e){

});
$('#setup').on("pagebeforeshow", function (e) {
	$('#httptimeout').val(localStorage.getItem('timeout')/1000).slider('refresh');
	$('#httpretries').val(localStorage.getItem('httpretries')).slider('refresh');
	$('#webcamurl').val(localStorage.getItem('webcamurl'));
	$('#webcamname').val(localStorage.getItem('webcamname'));
	$('#webcampass').val(localStorage.getItem('webcampass'));
});
$('#sensorlog').on("pagebeforeshow",function (e) {
	$('#sensorloglist').empty().listview('refresh');
	$('input[data-type="search"]').val("");
	$('input[data-type="search"]').trigger("change");
}).on("pageshow", function () {
		setTimeout(function () {
			getsensordata(loadsensor);
		}, 0);
	});
$('#outlog').on("pagebeforeshow",function (e) {
	$('#outloglist').empty().listview('refresh');
	$('input[data-type="search"]').val("");
	$('input[data-type="search"]').trigger("change");
}).on("pageshow", function (e) {
		if (logpath.length==19)
			loadfileoutlog(); else
			loadoutlog();
	});
$('#pwmpage').on('pageinit', function(e){
	$('#syncmode').selectmenu();
	$('#wavemode').selectmenu();
	$('#level').slider();
	$('#pulsewidth').slider();
}).on("pagebeforeshow", function(e){
	$('#pumpname').html('Pump '+pwmpumpsidx);
	$('#level').on('slidestop', function(e){
		pwmpagechange(e);
	});
	$('#pulsewidth').on('slidestop', function(e){
		pwmpagechange(e);
	});
  updatepwmpagefields();
	clearTimeout(updatewavefunction);
}).on("pageshow",function(){
}).on('pagebeforehide', function(e){
		lastupdatetime=new Date(0);
			updateStatus();
}).on('change', '#pulsewidth, #level,  #wavemode, #syncmode, #pumpauto, #pumpmanual', function (e,ui){
	if (e.target.id=='pulsewidth' ||e.target.id=='level') {
		if (e.originalEvent === undefined) return;
	}
	pwmpagechange(e);
});
$('#doserpage').on('pageinit', function(e){

}).on('pagebeforeshow', function(e){
	 $('#dosername').html(dosers[doseridx].n);
	 $('#_dosevolume').val(5);
	 $('#_setdosedvolume').val(0);
}).on('pageshow', function (e){

}).on('pagebeforehide', function(e){
	lastupdatetime= new Date(0);
}).on('change', function(e,ui) {

});
function pwmpagechange(e) {
	var tmp=e.target.value;
	if (e.target.id=='level') {
		if (tmp==100) tmp=255; else  tmp=parseInt(tmp)*255/100;
		tmp=tmp.toFixed(0);
		if (tmp==pwmpumpsconfig[pwmpumpsidx].l)return;
		pwmpumpsconfig[pwmpumpsidx].l=tmp;
	} else if (e.target.id=='pulsewidth') {
		if (tmp==pwmpumpsconfig[pwmpumpsidx].pw) return;
		pwmpumpsconfig[pwmpumpsidx].pw=tmp;
	} else if (e.target.id=='wavemode') {
		if (tmp==pwmpumpsconfig[pwmpumpsidx].wm) return;
		pwmpumpsconfig[pwmpumpsidx].wm=tmp;
	} else if (e.target.id=='syncmode') {
		if (tmp==pwmpumpsconfig[pwmpumpsidx].sm) return;
		pwmpumpsconfig[pwmpumpsidx].sm=tmp;
	} else if (e.target.id=='pumpauto') {
		if (tmp==pwmpumpsconfig[pwmpumpsidx].pa) return;
		pwmpumpsconfig[pwmpumpsidx].pa=tmp;
	} else if (e.target.id=='pumpmanual') {
		if (tmp==pwmpumpsconfig[pwmpumpsidx].pa) return;
		pwmpumpsconfig[pwmpumpsidx].pa=tmp;
	} else return;
	$.ajax('pwmset.json', {
		data:"{\"channel\":\""+pwmpumpsidx+"\",\""+e.target.id+"\":\""+tmp+"\"}",
		contentType:'application/json',
		type:'POST'}).always(function () {
		}).done(function (data) {
			pwmpumpsconfig=data.pwmpumps;
			updatepwmpagefields();
		}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
		});
}
$('#Outlets').on("change", $("input[type='radio']"), function (event, ui) {
	var olet=event.target;
	var val=$(olet).val();
	var name=olet.name;
	var dev=name.replace('_state', '');
	var s=name+"="+val+"&noResponse=1";
	$.mobile.loading('show', {text:'Sending command...', textVisible:true});
	$.post("/cgi-bin/status.cgi", s,function (data) {
		if (val=="0") {
			lastupdatetime=new Date(0);
			setTimeout(updateStatus, 600);
		} else if (val=="1") {
			$('#'+dev).attr('style', 'color:#F00').addClass('refresh');
		} else if (val=="2") {
			$('#'+dev).attr('style', 'color:#090').addClass('refresh');
		}
	}).always(function () {
			$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			alert(textStatus);
			updateStatus();
		});
});
$('#webcam').on('collapse',function () {
	imageupdatecount=0;
	$('#camImg').off('load error');
	$('#camImg').attr('src', '');
	$.mobile.loading('hide');
}).on('expand', function (e) {
		var wcurl=getwebcamurl();
		var videopush=false;
		if (wcurl!="") {
			if (wcurl.indexOf("videostream.cgi")!= -1) {
				videopush=true;
				if ($(window).width()>320)
					$('#camImg').removeAttr('width'); else
					$('#camImg').attr('width', '290px');
			} else {
				$('#camImg').attr('width', '290px');
			}
			$.mobile.loading('show', {text:'Loading Image...', textVisible:true});
			var firstparam=wcurl.indexOf('?')== -1;
			$('#camImg').attr('src', wcurl+(firstparam?'?':'&')+'_='+Math.random());
			$('#camImg').one('load error', function (e) {
				$.mobile.loading('hide');
				if (e.type=='error') {
					alert('Unable to load image.');
					$('#playbtn').button('disable');
				} else {
					$('#playbtn').button(videopush?'disable':'enable');
				}
			});
		} else {
			$('#camImg').attr('src', '');
			$('#playbtn').button('disable');
		}
	});
$('#SensorBar').on('collapse',function () {
	sensoropen=false;
}).on('expand', function (e) {
		if (!sensoropen) {
			sensoropen=true;
			if (initialized)
				setTimeout(function () {
					updateStatus(true);
				}, 0);
		}
	});
$('#OutletsBar').on('expand',function (e) {
	if (initialized) {
		if ($('#Outlets li').length>12) {
			$('#page [data-role=header], #page [data-role=footer]').fixedtoolbar("hide");
		}
		setTimeout(updateStatus, 0);
	}
}).on('collapse', function () {
		if ($('#Outlets li').length>12) {
			$('#page [data-role=header], #page [data-role=footer]').fixedtoolbar("show");
		}
	});
$('#InputsBar').on('expand', function (e) {
	inputsopen=true;
	setTimeout(updateStatus, 0);
}).on('collapse', function (e){
	inputsopen=false;
});
$('#DosersBar').on('expand', function (e){
	dosersopen=true;
	setTimeout(updateStatus, 0);
}).on('collapse', function (e){
	dosersopen=false;
});
$('#PWMPumpsBar').on('expand',function(e){
	if (pwmpumpsconfig.length==0) return;
	if (!pwmpumpsopen) {
		pwmpumpsopen=true;
		if (initialized) {
			setTimeout(function() {updateStatus(0);},0);
		}
	}
}).on('collapse',function(){
		pwmpumpsopen=false;
		clearTimeout(updatewavefunction);
	});
function initializeGauges(){
	if (gaugesinitialized) return;
	var opts = {
		angle: 0.15, // The length of each line
		lineWidth: 0.4, // The line thickness
		pointer: {
			length: 0.9, // The radius of the inner circle
			strokeWidth: 0.035, // The rotation offset
			color: '#000000' // Fill color
		},
		limitMax: 'false',   // If true, the pointer will not go past the end of the gauge
		fontSize: 6,
		colorStart: '#6FADCF',   // Colors
		colorStop: '#8FC0DA',    // just experiment with them
		strokeColor: '#E0E0E0',   // to see which ones work best for you
		generateGradient: true
	};
	for (var i=0;i<$('#PWMFans li').size();i++) {
		$('#canvasfan'+i).gauge(opts);
		var data = $('#canvasfan'+i).data();
		data.gauge.maxValue=pwmfanmaxrpm[i]; // set max gauge value
		data.gauge.animationSpeed=1; // set animation speed (32 is default value)
		data.gauge.setTextField($('#rpmval_'+i)[0]);
		data.gauge.set(parseFloat(0));
	}
	gaugesinitialized = true;
}
$('#PWMFansBar').on('expand',function(e){
	if (pwmfanmaxrpm.length==0) return;
	pwmfansopen=true;
	initializeGauges();
	updateStatus();
	clearTimeout(csutilfunction);
	csutilfunction=csutil({"cmd":"getval","type":"5"});
}).on('collapse',function(){
	pwmfansopen=false;
	clearTimeout(csutilfunction);
	csutilfunction=null;
}).on('slidestart',$("input[type=range]"), function(event, ui){
	clearTimeout(csutilfunction);
}).on('slidestop',$("input[type=range]"), function(event,ui){
	pwmfan({"cmd":"setlvl","idx":""+parseInt(event.target.id.charAt(8))+"","value":""+event.target.value+""});
})
$('#MacrosBar').on('expand',function (e) {
	if (!feedexpanded) {
		feedexpanded=true;
		updateFeedTime();
	}
}).on('collapse', function () {
		feedexpanded=false;
		clearTimeout(feedtimeoutfunction);
	});
$('#outloglist').on('orientationchange', function (e) {
	if (e.orientation=='landscape') {
		$('#outloglist .ui-block-a').css('width', '40%');
		$('#outloglist .ui-block-b').css('width', '35%');
		$('#outloglist .ui-block-c').css('width', '25%');
	} else if (e.orientation=='portrait') {
		$('#outloglist .ui-block-a').css('width', '55%');
		$('#outloglist .ui-block-b').css('width', '35%');
		$('#outloglist .ui-block-c').css('width', '10%');
	}
	$('#outloglist').listview('refresh');
});
$('#Sensors').on('orientationchange', function (e) {
	if (e.orientation=='landscape') {
		$('.sensor').css('width', '80%');
	} else if (e.orientation=='portrait') {
		$('.sensor').css('width', '70%');
	}
	getSparkData();
});
$('#PWMPumps').on('orientationchange', function(e){
	if (e.orientation=='landscape'){
		pwmbarwidth=10;
	} else if (e.orientation=='portrait'){
		pwmbarwidth=6;
	}
}).on('click', 'li a', function(e){
	pwmpumpsidx = $(this).closest('li').index();
});
$('#Dosers').on('click', 'li a', function(e){
	doseridx = $(this).closest('li').index();
});
$('#csetupitemlist').on('click','li a', function(e){
	csitem = $(this).closest('li').index();
})
$(document).on('mouseenter', '.outlettext',function (e) {
	var toolTip=$(this).attr('tooltip');
	$('<span class="tooltip"></span>').text(toolTip).appendTo('body').css('top', (e.pageY-10)+'px').css('left', (e.pageX+20)+'px').fadeIn('slow');
}).on('mouseleave', '.outlettext',function () {
	$('.tooltip').remove();
}).on('mousemove', '.outlettext', function (e) {
	$('.tooltip').css('top', (e.pageY-10)+'px').css('left', (e.pageX+20)+'px');
});
function getpwmpumpdata() {
	$.getJSON('pwmpumpdata.json',function(data){
		for (var i in data.pwmpumpdata) {
			var x = data.pwmpumpdata[i].data;
			$(".pump"+i+"_gr").sparkline(x, { type: 'bar', height:"100%",chartRangeMin:"0",chartRangeMax:"255",barWidth:pwmbarwidth,	barSpacing:"1",
				disableInteraction:true, barColor:(pwmpumpsconfig[i].pa=='1'?'blue':'gray')});
		}
	}).always(function(){
		if (pwmpumpsopen && $.mobile.activePage[0].id=='page'){
			clearTimeout(updatewavefunction);
			updatewavefunction=setTimeout('getpwmpumpdata();',1000);
		}
	}).fail(function(jqXHR, textStatus,errorThrown){});
}
function getsensordata(callback) {
	var initstring="Updating";
	if (retry>0) {
		initstring=initstring+" "+retry;
	}
	initstring+="...";
	if (initialized)
		$.mobile.loading('show', {text:initstring, textVisible:true});
	var timenow=new Date();
	var timeincr=0;
	timenow.setDate(timenow.getDate()-1);
	if (sensordata.record.length>0) {
		timeincr=calculateLogInterval();
		$.each(sensordata.record, function (i, r) {
			var currentTime=new Date(r.date);
			if (currentTime.getTime()>=timenow.getTime()) {
				for (var x=0; x<i-1; x++)
					sensordata.record.shift();
				if (sensordata.record.length>0) {
					timenow=new Date(sensordata.record[sensordata.record.length-1].date);
					timenow.setTime(timenow.getTime()+timeincr);
				}
				return false;
			}
		});
	}
	if (timenow.getTime()>(new Date()).getTime()) {
		if (typeof callback=="function")
			callback();
		$.mobile.loading('hide');
		return;
	}
	var sdate=(timenow.getFullYear()+' ').substring(2, 4)+checkTime(timenow.getMonth()+1)+checkTime(timenow.getDate())+checkTime(timenow.getHours())+checkTime(timenow.getMinutes());
	$.get("/cgi-bin/datalog.xml?sdate="+sdate+"&days=31",function (data) {
		var records=data.getElementsByTagName("record");
		if (records.length>0&&sensordata.names.length==0) {
			var names=records[records.length-1].getElementsByTagName("name");
			for (var i=0; i<names.length; i++) {
				sensordata.names.push(names[i].childNodes[0].nodeValue);
			}
		}
		$.each(records, function (i, rec) {
			var probes=rec.getElementsByTagName("probe");
			var newrec={'date':rec.getElementsByTagName("date")[0].childNodes[0].nodeValue, data:[]};

			for (var i=0; i<sensordata.names.length; i++){
				var found=false;
				$.each(probes, function(j,probe){
					if (probe.getElementsByTagName("name")[0].childNodes[0].nodeValue==sensordata.names[i]){
						newrec.data.push(probe.getElementsByTagName("value")[0].childNodes[0].nodeValue);
						found=true;
						return false;
					}
				});
				if (!found){
					newrec.data.push(NaN);
				}
			}
			sensordata.record.push(newrec);
		});
		if (typeof callback=="function") callback();
	}).fail(function (jqXHR, textStatus, errorThrown) {
			if (retry>=maxretries) {
				alert('unable to connect to apex.'+textStatus);
				retry=0;
				return;
			}
			retry++;
			console.log(textStatus);
			setTimeout(getsensordata, 1);
		}).always(function () {
			if (initialized)
				$.mobile.loading('hide');
		}).done(function (f) {
			retry=0;
		});
}
function loadoutlog() {
	var initstring="Loading";
	if (retry>0) {
		initstring=initstring+" "+retry;
	}
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	var timenow=new Date();
	timenow.setDate(timenow.getDate()-1);
	$.each(outlogdata.record, function (i, r) {
		var currentTime=new Date(r.date);
		if (currentTime.getTime()>=timenow.getTime()) {
			for (var x=0; x<i-1; x++)
				outlogdata.record.shift();
			if (outlogdata.record.length>0) {
				timenow=new Date(outlogdata.record[outlogdata.record.length-1].date);
				timenow.setTime(timenow.getTime()+60000);
			}
			return false;
		}
	});
	var sdate=(timenow.getFullYear()+' ').substring(2, 4)+checkTime(timenow.getMonth()+1)+checkTime(timenow.getDate())+checkTime(timenow.getHours())+checkTime(timenow.getMinutes());
	$.get("/cgi-bin/outlog.xml?sdate="+sdate+"&days=31",function (data) {
		var records=data.getElementsByTagName("record");
		$.each(records, function (i, rec) {
			var datetxt=rec.getElementsByTagName("date")[0].childNodes[0].nodeValue;
			var name=rec.getElementsByTagName("name")[0].childNodes[0].nodeValue;
			var value=rec.getElementsByTagName("value")[0].childNodes[0].nodeValue;
			outlogdata.record.push({'date':datetxt, 'name':name, 'value':value});
		});
		$.each(outlogdata.record, function (i, rec) {
			var divblocka=$('<div class="ui-block-a">'+rec.date+'</div>');
			var divblockb=$('<div class="ui-block-b">'+rec.name+'</div>');
			var divblockc=$('<div class="ui-block-c">'+rec.value+'</div>');
			var sec=$('<section class="ui-grid-b">');
			sec.append(divblocka, divblockb, divblockc);
			var olist=$('<li/>');
			olist.append(sec);
			$('#outloglist').append(olist);
		});
		$('#outloglist').listview('refresh');
	}).always(function () {
			$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			if (retry>=maxretries) {
				alert('unable to connect to apex. '+textStatus);
				retry=0;
				history.back();
				return;
			}
			retry++;
			setTimeout(loadoutlog, 1);
		}).done(function (f) {
			retry=0;
		});
}
function calculateLogInterval() {
	if (sensordata.record.length>1) {
		var timeval=0;
		var interval=0;
		for (var i=sensordata.record.length-1; i>=0; i--) {
			var rec=sensordata.record[i];
			var curtimeval=new Date(rec.date).getTime();
			if (timeval==0) {
				timeval=curtimeval;
				continue;
			}
			if (interval==timeval-curtimeval)
				return interval;
			interval=timeval-curtimeval;
			timeval=curtimeval;
		}
	}
	return 60000; //1 minute
}
function loadsensor() {
	$.each(sensordata.record, function (i, rec) {
		var vals=rec.data;
		var datetxt=rec.date;
		var divblock=$('<div class="ui-block-a">'+datetxt+'</div>');
		var sec=$('<section class="ui-grid-'+String.fromCharCode(96+vals.length)+'">');
		sec.append(divblock);
		$.each(vals, function (j, val) {
			var divblock=$('<div class="ui-block-'+String.fromCharCode(98+j)+'" style="width:'+(45.0/vals.length)+'%">'+val+'</div>');
			sec.append(divblock);
		});
		var olist=$('<li/>');
		olist.append(sec);
		$('#sensorloglist').append(olist);
	});
	$('#sensorloglist').listview('refresh');
}
function openSetup() {
	$.mobile.changePage('#setup');
}
function initHome() {
	if (initialized) return;
	$.getJSON('pwmwavedef.json',function(e){
		wavedef=e.wavedef;
		$('#wavemode').empty();
		$('#_wavemode').empty();
		$.each(wavedef, function (i, wave) {
			$('#wavemode').append('<option value="'+i+'">'+wave.name+'</option>');
			$('#_wavemode').append('<option value="'+i+'">'+wave.name+'</option>');
		});
		$('#wavemode').val('0').selectmenu().selectmenu('refresh',true);
		$('#_wavemode').val('0').selectmenu().selectmenu('refresh',true);
		initPage();
	});

}
function setFeed(i) {
	var s="FeedCycle=Feed&FeedSel="+i+"&noResponse=1";
	var initstring="Starting Feed ";
	initstring=initstring+String.fromCharCode(65+i);
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	$.post("/cgi-bin/status.cgi", s,function (f) {
		if (i==4) {
			feedcounter=0;
			feedname=0;
			feedactive=false;
		} else {
			feedactive=true;
		}
		updateFeedButtons();
	}).always(function () {
			$.mobile.loading('hide');
			updateFeedTime();
		}).fail(function (jqXHR, textStatus, errorThrown) {
			alert(textStatus);
		}).done(function (data) {
		});
}
function updateFeedButtons() {
	if (feedactive) {
		$('#feed1').button('disable');
		$('#feed2').button('disable');
		$('#feed3').button('disable');
		$('#feed4').button('disable');
	} else {
		$('#feed1').text("Feed A").button('enable').button('refresh');
		$('#feed2').text("Feed B").button('enable').button('refresh');
		$('#feed3').text("Feed C").button('enable').button('refresh');
		$('#feed4').text("Feed D").button('enable').button('refresh');
	}
}
function checkTime(i) {
	if (i<10) {
		i="0"+i;
	}
	return i;
}
function updateFeedTime() {
	$.getJSON("/cgi-bin/status.json",function (a) {
		var feednum=parseInt(a.pstat.feed.name);
		var feedcount=parseInt(a.pstat.feed.active);
		feedactive=feednum>0&&feednum<5;
		if (feedexpanded) {
			if (feedactive) {
				if (feedcounter==0&&feedcount==0) { //try again
					clearTimeout(feedtimeoutfunction);
					feedtimeoutfunction=setTimeout(updateFeedTime, 0);
					return;
				} else if (feedcounter==0&&feedcount>0) {
					feedcounter=feedcount;
					feedname=feednum;
				}
			}
			updateFeedButtons();
			updateFeedActive();
		}
		feedcounter=feedcount;
		feedname=feednum;
	}).always(function () {
			if (feedcounter>0&&feedexpanded) {
				clearTimeout(feedtimeoutfunction);
				feedtimeoutfunction=setTimeout(updateFeedTime, 5000);
			}
		}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
		}).done(function (a) {
		});
}
function updateFeedActive() {
	if (feedcounter>0) {
		$('#feed'+feedname).text("Feed "+String.fromCharCode(64+feedname)+"  "+feedcounter).button('refresh');
		feedcounter--;
		clearTimeout(feedactivefunction);
		feedactivefunction=setTimeout(updateFeedActive, 998);
	} else {
		feedactive=0;
		feedname=0;
		feedcounter=0;
		updateFeedButtons();
		clearTimeout(feedactivefunction);
		clearTimeout(feedtimeoutfunction);
	}
}
function updateStatus(spark) {
	var initstring="Updating";
	if (retry>0) {
		initstring=initstring+" "+retry;
	} else {
		var currenttime=new Date();
		if (currenttime.getTime()-lastupdatetime.getTime()<15000) {
			if (sensoropen) {
				setTimeout(function () {getsensordata(getSparkData);}, 0);
			}
			if (pwmpumpsopen) {
				clearTimeout(updatewavefunction);
				updatewavefunction=setTimeout("getpwmpumpdata();",0);
			}
			if (inputsopen) {
				animateATO();
			}
			if (dosersopen){
				animateDoser();
			}
			return;
		}
		lastupdatetime=currenttime;
	}
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	$.getJSON("/cgi-bin/status.json",function (f) {
		if (spark==true)
			setTimeout(function () {getsensordata(getSparkData);}, 0);
		renderPage(f);
		retry=0;
	}).always(function () {
			$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			if (retry>=maxretries) {
				alert('unable to connect to apex. '+textStatus);
				retry=0;
				return;
			}
			retry++;
			setTimeout(function () {
				updateStatus(spark)
			}, 1);
		}).done(function (f) {
		});
}
function renderPage(f) {
	var a;
	var tmp1;
	var tmp2;
	var tmp3;
	var tmp4;
	a=f;
	var h=[];
	var c=[];
	var e=0;
	var td=new Date(a.pstat.d*1000);
	var ts=checkTime(td.getMonth()+1)+'-'+checkTime(td.getDate())+'-'+td.getFullYear()+' '+checkTime(td.getHours())+':'+checkTime(td.getMinutes())+':'+checkTime(td.getSeconds());
	$('#footertxt').html(ts);
	$('#hostname').html(a.pstat.hostname);
	document.title=a.pstat.hostname;
	$('#software').html(a.pstat.software);
	$('#hardware').html(a.pstat.hardware);
	$('#serial').html(a.pstat.serial);
	$('#timezone').html(a.pstat.timezone);
	if (!isNaN(a.pstat.power.failed)) {
		td=new Date(a.pstat.power.failed*1000);
		ts=checkTime(td.getMonth()+1)+'-'+checkTime(td.getDate())+'-'+(td.getFullYear()-2000)+' '+checkTime(td.getHours())+':'+checkTime(td.getMinutes())+':'+checkTime(td.getSeconds());
		$('#powerfailed').html(ts);
	} else {
		$('#powerfailed').html(a.pstat.power.failed);
	}
	if (!isNaN(a.pstat.power.restored)) {
		td=new Date(a.pstat.power.restored*1000);
		ts=checkTime(td.getMonth()+1)+'-'+checkTime(td.getDate())+'-'+(td.getFullYear()-2000)+' '+checkTime(td.getHours())+':'+checkTime(td.getMinutes())+':'+checkTime(td.getSeconds());
		$('#powerrestored').html(ts);
	} else {
		$('#powerrestored').html(a.pstat.power.restored);
	}
	for (var i in a.pstat.probes) {
		var probe=a.pstat.probes[i];
		var val = parseFloat(probe.v);
		var places = 2;    //ph, do
		if (probe.t==="Temp" || probe.t==="Cond" || probe.t==="Amps") {
			places=1;
		} else if (probe.t==="Orp") {
			places=0;
		}
		$("#"+probe.did).html(val.toFixed(places));
		if (probe.t==="Cond") {
			var sg = val/35.0*0.0264+1.0;
			$('#'+probe.did+'_sg').html("SG "+sg.toFixed(4));
		}
	}
	for (var i in a.pstat.inputs) {
		var input=a.pstat.inputs[i];
		$('#'+input.did).html(getInputHtml(input));
		if (inputsopen && input.did==="base_I1"){
			animateATO();
		}
	}
	for (var i in a.pstat.outlets) {
		var outlet=a.pstat.outlets[i];
		var tooltiptxt="";
		tmp1='#outlet'+i;
		c='color:#090';
		if (outlet.s=="AON") {
			tmp2='auto';
			tmp3='on';
			tmp4='off';
		} else if (outlet.s=="AOF") {
			tmp2='auto';
			tmp3='on';
			tmp4='off';
			c='color:#F00';
		} else if (outlet.s=="ON") {
			tmp2='on';
			tmp3='auto';
			tmp4='off';
		} else if (outlet.s=="OFF") {
			tmp2='off';
			tmp3='auto';
			tmp4='on';
			c='color:#F00';
		} else if (outlet.s=="UNK") {
			tmp2='auto';
			tmp3='off';
			tmp4='on';
			c='color:#00F';
		} else {
			tmp2='auto';
			tmp3='off';
			tmp4='on';
			c='color:#F90';
			tooltiptxt=outlet.s;
		}
		$(tmp1+tmp2).prop('checked', true).checkboxradio("refresh");
		$(tmp1+tmp3).prop('checked', false).checkboxradio("refresh");
		$(tmp1+tmp4).prop('checked', false).checkboxradio("refresh");
		if (tooltiptxt!="")
			$('#'+outlet.n).attr('tooltip', tooltiptxt).addClass('outlettext');
		$('#'+outlet.n).attr('style', c);
	}
	pwmpumpsconfig=a.pstat.pwmpumps;
	for (var i in a.pstat.pwmpumps){
		var pump =a.pstat.pwmpumps[i];
		if (i>0 && pump.sm!=0) {
			$('#pump'+i+'_waveMode').html(getWaveName(a.pstat.pwmpumps[0].wm));
			$('#pump'+i+'_foot').html('pulse width='+getPulseWidth(a.pstat.pwmpumps[0].pw)+' ms period ='+' '+getPeriod(a.pstat.pwmpumps[0])+' ms');
			$('#pump'+i+'_speed').html(getSpeedPCT(a.pstat.pwmpumps[0].l));
		} else {
			$('#pump'+i+'_waveMode').html(getWaveName(pump.wm));
			$('#pump'+i+'_foot').html('pulse width'+'='+getPulseWidth(pump.pw)+' ms period = '+getPeriod(pump)+' ms');
			$('#pump'+i+'_speed').html(getSpeedPCT(pump.l));
		}
		$('#pump'+i+'_syncMode').html(getSyncModeName(pump.sm,false));
	}
	if (pwmpumpsopen) {
		clearTimeout(updatewavefunction);
		updatewavefunction=setTimeout("getpwmpumpdata();",0);
	}
	for (var i in a.pstat.dosers){
		var doser=f.pstat.dosers[i];
		var fullvol = parseInt(doser.fv);
		var dosedvol = parseInt(doser.dv);
		var remainingvol = fullvol - dosedvol/100.0;
		$('#doser_'+i).width(remainingvol/fullvol*100+"%");
		$('#doser_txt_'+i).html(remainingvol+" ml");
		$('#doser_foot_'+i).html("Daily "+doser.dd+" ml "+doser.dpd+"x Dosed "+dosedvol/100.0+" ml Full "+fullvol+" ml");
	}
	dosers = a.pstat.dosers;
	if (dosersopen){
			animateDoser();
	}
	if (pwmfansopen){
		for (var i in a.pstat.pwmfans){
			var fan=a.pstat.pwmfans[i];
			var data = $('#canvasfan'+i).data();
			data.gauge.set(parseInt(fan.r));
			$('#statusfan'+i).html(parseFloat(fan.t).toFixed(1));
			$('#fanlevel'+i).val(fan.l).slider("refresh");
			$('#fanauto'+i).prop('checked', fan.m=="0").checkboxradio("refresh");
			$('#fanmanual'+i).prop('checked', fan.m=="1").checkboxradio("refresh");
		}
	}
}
function getSparkData() {
	if (sensoropen==false&&initialized) return;
	for (var i=0; i<sensordata.names.length; i++) {
		var c=[];
		var sensorname=sensordata.names[i];
		var max_=0.0;
		var min_=1000.0;
		var total_=0.0;
		var actualrecs_=0;
		$.each(sensordata.record, function (j, rec) {
			if (isNaN(rec.data[i])) {
				c.push(null);
			  return true;
			} else
				c.push(parseFloat(rec.data[i]));
			actualrecs_++;
			if (c[j]>max_) {
				max_=c[j];
			}
			if (c[j]<min_) {
				min_=c[j];
			}
			total_+=c[j];
		});
		$("."+sensorname+"_gr").sparkline(c, {width:"100%", height:"100%"});
		$("#"+sensorname+"_mma").html("min:"+min_+"&nbsp;&nbsp;max:"+max_+"&nbsp;&nbsp;avg:"+parseFloat(total_/actualrecs_).toFixed(2));
	}
	if (!initialized) {
		initialized=true;
		lastupdatetime=new Date();
		$.mobile.loading('hide');
	}
}
function startPlay() {
	$('#camImg').on('load', fixImageTimeout);
	$('#playbtn').button('disable');
	imageupdatecount=15;
	reloadImage();
}
function fixImageTimeout() {
	setTimeout(reloadImage, 500);
}
function reloadImage() {
	if (imageupdatecount<=0) {
		imageupdatecount=15;
		$('#playbtn').text('Play');
		$('#playbtn').button('enable');
		$('#playbtn').button('refresh');
		$('#camImg').off('load error');
		return;
	}
	var wcurl=getwebcamurl();
	if (wcurl!="") {
		$('#playbtn').text('Play '+imageupdatecount);
		$('#playbtn').button('refresh');
		imageupdatecount--;
		var firstparam=wcurl.indexOf('?')== -1;
		$('#camImg').attr('src', wcurl+(firstparam?'?':'&')+'_='+Math.random());
	}
}
function getwebcamurl() {
	var url="http://";
	var webname=localStorage.getItem('webcamname');
	var webpass=localStorage.getItem('webcampass');
	var weburl=localStorage.getItem('webcamurl');
	if (weburl!=null&&weburl!="") {
		if (weburl.indexOf("http://")==0) {
			weburl=weburl.substring(7);
		}
		if (webname!=null&&webname!="") {
			url=url+webname+':'+webpass+'@';
		}
		url=url+weburl;
		return url;
	}
	return "";
}
function initPage() {
	var initstring="Initializing";
	if (retry>0) {
		initstring=initstring+" "+retry;
	}
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	var url="/cgi-bin/status.json";
	$.getJSON(url,function (f) {
		$('#Sensors').empty();
		for (var i in f.pstat.probes) {
			probe=f.pstat.probes[i];
			var leftblock=$('<div class="sensor"></div>');
			var row1=$('<div class="sensor_name">'+probe.n+'</div>');
			var row2=$('<div class="sensor_spark '+probe.n+'_gr"></div>');
			var row3=$('<div class="sensor_mma" id="'+probe.n+'_mma"></div>');
			var dummy=$('<div style="clear:both"/>');
			leftblock.append(row1);
			leftblock.append(row2);
			leftblock.append(row3);
			var rightblock=$('<div class="sensor2"></div>');
			var rowa=$('<div class="sensor_value" id="'+probe.did+'"></div>');
			rightblock.append(rowa);
			if (probe.t==="Cond") {
				var rowb=$('<div class="sensor_sg" id="'+probe.did+'_sg"></div>');
				rightblock.append(rowb);
			}
			var slist=$('<li/>');
			slist.append(leftblock);
			slist.append(rightblock);
			slist.append(dummy);
			$('#Sensors').append(slist);
		}
		$('#Sensors').listview('refresh');
		$('#Outlets').empty();
		for (var i in f.pstat.outlets) {
			var outlet=f.pstat.outlets[i];
			var divblocka=$('<div class="ui-block-a"/>');
			divblocka.append($('<h3 class="ui-li-heading" Tooltip="" style="color:#090" id="'+outlet.n+'">'+outlet.n+'</h3>'));
			var divblockb=$('<div class="ui-block-b"/>');
			var fldset=$('<fieldset data-role="controlgroup" data-type="horizontal"  data-mini="true"/>');
			fldset.append($('<input type="radio" name="'+outlet.n+'_state" id="outlet'+i+'auto" value="0" checked="true" />'));
			fldset.append($('<label for="outlet'+i+'auto">Auto</label>'));
			fldset.append($('<input type="radio" name="'+outlet.n+'_state" id="outlet'+i+'off" value="1" checked="false" />'));
			fldset.append($('<label for="outlet'+i+'off">Off</label>'));
			fldset.append($('<input type="radio" name="'+outlet.n+'_state" id="outlet'+i+'on" value="2" checked="false"/>'));
			fldset.append($('<label for="outlet'+i+'on">On</label>'));
			divblockb.append(fldset);
			var sec=$('<section class="ui-grid-a"/>');
			sec.append(divblocka, divblockb);
			var olist=$('<li/>');
			olist.append(sec);
			$('#Outlets').append(olist);
		}
		$('#Outlets').trigger('create');
		$('#Outlets').listview('refresh');
		$('#Inputs').empty();
		for (var i in f.pstat.inputs) {
			var input=f.pstat.inputs[i];
			if (input.n=="Top Off")
				hassonar=true;
			var divblocka=$('<div class="ui-block-a"/>');
			divblocka.append($('<h3 class="ui-li-heading" id="'+input.n+'">'+input.n+'</h3>'));
			var divblockb=$('<div class="ui-block-b"/>');
			divblockb.append($('<h3 class="ui-li-heading" id="'+input.did+'">'+getInputHtml(input)+'</h3>'));
			var sec=$('<section class="ui-grid-a"/>');
			sec.append(divblocka, divblockb);
			var olist=$('<li/>');
			olist.append(sec);
			$('#Inputs').append(olist);
		}
		$('#Inputs').trigger('create').listview('refresh');
		$('#PWMPumps').empty();
		for (var i in f.pstat.pwmpumps) {
			var pump=f.pstat.pwmpumps[i];
			var sec = $('<section class="ui-grid-b pump_info"></section>');
			var divblocka=$('<div class="ui-block-a" style="text-align:center" id="pump'+i+'_waveMode"></div>');;
			var divblockb = $('<div class="ui-block-b" id="pump'+i+'_syncMode"></div>');
			var divblockc = $('<div class="ui-block-c" id="pump'+i+'_speed"></div>');
			var pumpfoot=$('<div class="pump_footer" id="pump'+i+'_foot"></div>');
			sec.append(divblocka,divblockb,divblockc);
			var sparkbar = $('<div class="pump_spark pump'+i+'_gr"></div>');
			var anc = $('<a href="#pwmpage" data-identified="'+i+'" class="pump"></a>');
			anc.append(sec,sparkbar,pumpfoot);
			var olist=$('<li/>');
			olist.append(anc);
			$('#PWMPumps').append(olist);
		}
		$('#PWMPumps').trigger('create').listview('refresh');
		$('#PWMFans').empty();
		for (var i in f.pstat.pwmfans) {
			var pwmfan=f.pstat.pwmfans[i];
			pwmfanmaxrpm.push(pwmfan.mr);
			var leftdiv = $('<div class="pwmfanleft"></div>');
			var rightdiv = $('<div class="pwmfanright"></div>');
			var divend = $('<div style="clear:both"/>');
			var rpmdiv = $('<div style="font-size:small"></div>');
			rpmdiv.append('<div id="rpmval_'+i+'" style="display:inline-block;"></div>');
			rpmdiv.append('<div style="display:inline-block;">RPM</div>');
			var name = $('<div style="font-size:large">'+pwmfan.n+'</div>');
			var canvas = $('<canvas id="canvasfan'+i+'" width="100px" height="50px"></canvas>');
			leftdiv.append(name,canvas,rpmdiv);
			var	slide=$('<input type="range" name="fanlevel'+i+'" id="fanlevel'+i+
					'" value="0" min="0" max="100" step="10" data-highlight="true" data-mini="true"/>');
			var radiofs = $('<fieldset data-role="controlgroup" data-type="horizontal" data-mini="true"></fieldset>');
			radiofs.append('<input type="radio" name="fanmode'+i+'" id="fanauto'+i+'" value="0" onchange=\'pwmfan({"cmd":"setmode","idx":"'+i+'","value":"0"});\' checked></input>');
			radiofs.append('<label for="fanauto'+i+'">Auto</label>');
			radiofs.append('<input type="radio" name="fanmode'+i+'" id="fanmanual'+i+'" value="1" onchange=\'pwmfan({"cmd":"setmode","idx":"'+i+'","value":"1"});\'></input>');
			radiofs.append('<label for="fanmanual'+i+'">Manual</label>');
			var	status=$('<div style="font-size:small;"><div style="display: inline-block;">Max Rpm:'+pwmfan.mr+' Temp:&nbsp;</div><div id="statusfan'+i+'" style="display: inline-block;">0</div></div>');
			rightdiv.append(radiofs,slide,status);
			var olist=$('<li/>');
			olist.append(leftdiv,rightdiv,divend);
			$('#PWMFans').append(olist);
		}
		$('#PWMFans').trigger('create').listview('refresh');
		$('#Dosers').empty();
		for (var i in f.pstat.dosers){
			var doser=f.pstat.dosers[i];
			var fullvol = parseInt(doser.fv);
			var dosedvol = parseInt(doser.dv);
			var remainingvol = fullvol - dosedvol/100.0;
			var sec = $('<div></div>');
			var divblocka = $('<div class="doser_name">'+doser.n+'</div>');
			var divblockb = $('<div class="doser_bar"><div class="perc" style="width:100%"><div class="perc_in" id="doser_'+i+'" style="width:10%"/><div class="perc_txt" id="doser_txt_'+i+'"></div> </div> </div>');
			var dummy=$('<div style="clear:both"/>');
			sec.append(divblocka,divblockb,dummy);
			var anc = $('<a href="#doserpage" data-identified="'+i+'" class="doser"></a>');
			var doserfoot = $('<div class="doser_info" id="doser_foot_'+i+'"></div>');
			anc.append(sec,doserfoot);
			var olist=$('<li/>');
			olist.append(anc);
			$('#Dosers').append(olist);
		}
		$('#Dosers').trigger('create').listview('refresh');
		$('#feed1').text("Feed A").button('enable').button('refresh');
		$('#feed2').text("Feed B").button('enable').button('refresh');
		$('#feed3').text("Feed C").button('enable').button('refresh');
		$('#feed4').text("Feed D").button('enable').button('refresh');
		$('#feedcancel').text("Feed Cancel").button('enable').button('refresh');
		renderPage(f);
		getsensordata(getSparkData);
	}).always(function () {
			if (initialized)
				$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			if (retry>=maxretries) {
				alert('unable to connect to apex. '+textStatus);
				retry=0;
				$.mobile.loading('hide');
				return;
			}
			retry++;
			setTimeout(initPage, 1);
		}).done(function (f, textStatus, xhr) {
			retry=0;
		});
}

function updatepwmpagefields() {
	var sm = pwmpumpsconfig[pwmpumpsidx].sm;
	$('#syncmode').val(sm).selectmenu(pwmpumpsidx==0?'disable':'enable').selectmenu('refresh');
	$('#wavemode').val(pwmpumpsconfig[sm==0?pwmpumpsidx:0].wm).selectmenu(sm==0?'enable':'disable').selectmenu('refresh');
	$('#pulsewidth').val(pwmpumpsconfig[sm==0?pwmpumpsidx:0].pw).slider(sm==0?'enable':'disable').slider('refresh');
	var pct = pwmpumpsconfig[sm==0?pwmpumpsidx:0].l;
	if (pct==255) pct=100; else pct=pct*100/255;
	pct=pct.toFixed(0);
	$('#level').val(pct).slider(sm==0?'enable':'disable').slider('refresh');
	$('#pumpauto').prop('checked', pwmpumpsconfig[pwmpumpsidx].pa==1).checkboxradio("refresh");
	$('#pumpmanual').prop('checked', pwmpumpsconfig[pwmpumpsidx].pa==0).checkboxradio("refresh");
}

function getWaveDef() {
	$.getJSON('pwmwavedef.json',function(e){
		 wavedef=e.wavedef;
	});
}

function getPeriod(n) {
	return getPulseWidth(n.pw)*parseInt(wavedef[parseInt(n.wm)].res);
}

function getPulseWidth(n) {
	return 110+parseInt(n)*22;
}

function getWaveName(n) {
	return wavedef[parseInt(n)].name;
}

function getSyncModeName(n, abbr) {
	switch (n) {
	case '0' : return abbr?"M":"master";
	case '1' : return abbr?"S":"sync";
	case '2' : return abbr?"A":"antisync";
	}
}

function getSpeedPCT(n) {
	if (parseInt(n)==255) return '100%';
	var x= parseInt(n)*100/255;
	return x.toFixed(0)+"%";
}
function  animateATO() {
	var bw = $("#ato_in").width();
	var pw = $("#ato_in").parent().width();
	$("#ato_in").width("100%");
	$("#ato_txt").html("100%");
	$("#ato_in").animate({width:""+bw+"px"},{duration:"long",step:function(now, tween){
		$("#ato_txt").html(Math.round(now/pw*100)+"%");
	}});
}
function animateDoser(){
	for (var i in dosers){
		var doser= dosers[i];
		var fullvol = parseInt(doser.fv);
		var dosedvol = parseInt(doser.dv);
		var remainingvol = fullvol - dosedvol/100.0;
		$('#doser_'+i).width("100%");
		$('#doser_txt_'+i).html(remainingvol.toFixed(2)+" ml");
		$("#doser_"+i).animate({width:""+remainingvol/fullvol*100.0+"%"},{duration:"long",step:function(now,tween){
			  var i = parseInt(tween.elem.id.charAt(6));
				var num = now/100.0*parseInt(dosers[i].fv);
				$('#doser_txt_'+i).html(num.toFixed(2)+" ml");
		}});
	}
}
function doserCommand(cmd){
	var nval = "";
	if (cmd=='mdose') {
		nval = parseFloat($('#_dosevolume').val())*10;
	} else if (cmd=='setdv') {
		nval = $(_setdosedvolume).val();
	} else if (cmd=='csave'){
		nval = $('#_dosercalvol').val();
	} else if (cmd=='cadj'){
		nval = $('#_dosercaltime').val();
	} else if (cmd=='ctest'){
		nval = parseFloat($('#_dosercalvol').val())*10;
		cmd="mdose";
	}
	$.mobile.loading('show');
	$.ajax('doser.json', {
		data:"{\"cmd\":\""+cmd+"\",\"idx\":\""+doseridx+"\",\"v\":\""+nval+"\"}",
		contentType:'application/json',
		type:'POST'}).always(function () {
			$.mobile.loading('hide');
		}).done(function (data) {
			dosers=data.dosers;
			if (cmd!='cstart' && cmd!='cabort' && cmd!='cadj')
				alert("Doser command sent.");
			if (cmd=='cstart') {
				$('#_dosercalvol').val(5);
				$('#_dosercaltime').val(980);
				$('#_dosercaltotaltime').val(0);
				$('#_dosercalstart').button('disable');
				$('#_dosercaladjust').button('enable');
				$('#_dosercalsave').button('disable');
				$('#_dosercaltest').button('disable');
				$('#_dosercalabort').button('enable');
			} else if (cmd=='cabort'){
				$('#_dosercalvol').val(5);
				$('#_dosercaltime').val(980);
				$('#_dosercaltotaltime').val(0);
				$('#_dosercalstart').button('enable');
				$('#_dosercaladjust').button('disable');
				$('#_dosercalsave').button('disable');
				$('#_dosercaltest').button('disable');
				$('#_dosercalabort').button('disable');
			} else if (cmd=='cadj'){
				$('#_dosercalstart').button('disable');
				$('#_dosercaladjust').button('enable');
				$('#_dosercalsave').button('enable');
				$('#_dosercaltest').button('disable');
				$('#_dosercalabort').button('enable');
				$('#_dosercaltotaltime').val(parseInt($('#_dosercaltotaltime').val())+parseInt($('#_dosercaltime').val()));
			} else if (cmd=='csave'){
				$('#_dosercalstart').button('enable');
				$('#_dosercaladjust').button('disable');
				$('#_dosercalsave').button('disable');
				$('#_dosercaltest').button('enable');
				$('#_dosercalabort').button('disable');
			}
		}).fail(function (jqXHR, textStatus, errorThrown) {
			alert(textStatus);
		});
}
function updateDoserSetupFields(){
	$('#_dosername').val(config.dosers[doseridx].n);
	$('#_doserdd').val(config.dosers[doseridx].dd);
	$('#_doserdpd').val(config.dosers[doseridx].dpd).selectmenu('refresh');
	$('#_doserint').val(config.dosers[doseridx].i).selectmenu('refresh');
	$('#_doserst').val(minsToTime(config.dosers[doseridx].st));
	$('#_doserfv').val(config.dosers[doseridx].fv);
}
function updateSensorSetupFields(){
	clearTimeout(csutilfunction);
	$('#_sensorlowalert').val(config.alerts[sensoridx].l);
	$('#_sensorhighalert').val(config.alerts[sensoridx].h);
	switch (parseInt(config.alerts[sensoridx].t)) {
	case 0:
		$('#_sensorphcalibrate').hide();
		$('#_sensororpcalibrate').hide();
		$('#_sensorcondcalibrate').hide();
		clearTimeout(csutilfunction);
		break;
	case 1:
		$('#_sensorphcalibrate').show();
		$('#_sensororpcalibrate').hide();
		$('#_sensorcondcalibrate').hide();
		var phidx=-1;
		for (var i=0;i<=sensoridx;i++){
			if (config.alerts[i].t==1){
				phidx++;
			}
		}
		csutilfunction=csutil({'cmd':'getval','type':'1','value':''+phidx});
		break;
	case 2:
		$('#_sensorphcalibrate').hide();
		$('#_sensororpcalibrate').show();
		$('#_sensorcondcalibrate').hide();
		csutilfunction=csutil({'cmd':'getval','type':'2','value':'0'});
		break;
	case 3:
		$('#_sensorphcalibrate').hide();
		$('#_sensororpcalibrate').hide();
		$('#_sensorcondcalibrate').show();
		csutilfunction=csutil({'cmd':'getval','type':'3','value':'0'});
		break;
	}
}
function updatePwmFanSetupFields(){
	$('#_fanname').val(config.pwmfans[pwmfanidx].n);
	$('#_fanmaxrpm').val(config.pwmfans[pwmfanidx].mr);
	$('#_fantemp').val(config.pwmfans[pwmfanidx].ts);
	$('#_fantemplow').val(config.pwmfans[pwmfanidx].tl).slider('refresh');
	$('#_fantemphigh').val(config.pwmfans[pwmfanidx].th).slider('refresh');
	$('#_fanlevellow').val(config.pwmfans[pwmfanidx].ll).slider('refresh');
	$('#_fanlevelhigh').val(config.pwmfans[pwmfanidx].lh).slider('refresh');
	$('#_fanalarm').attr("checked", config.pwmfans[pwmfanidx].a=="true").checkboxradio("refresh");
}
function getInputHtml(a) {
	if (a.did==="base_I1") {
		Status='<div class="perc" style="width:120px" id="ato"><div class="perc_in" id="ato_in" style="width:'+a.v+'%"/><div class="perc_txt" id="ato_txt">'+a.v+'%</div></div>';
	} else {
		if (a.v==0) {
			Status="Open".fontcolor("#090");
			/* open color for switches*/
		} else {
			Status="Closed".fontcolor("#f00");
			/* closed color for switches*/
		}
	}
	return Status;
}
function saveSetup() {
	localStorage.setItem('timeout', $('#httptimeout').val()*1000);
	localStorage.setItem('httpretries', $('#httpretries').val());
	localStorage.setItem('webcamurl', $('#webcamurl').val());
	localStorage.setItem('webcamname', $('#webcamname').val());
	localStorage.setItem('webcampass', $('#webcampass').val());
	$.ajaxSetup({
		timeout:localStorage.getItem('timeout'),
		cache:true
	});
	alert("Saved Settings.");
	maxretries=localStorage.getItem('httpretries');
	history.back();
}
$(document).on("swiperight", ".filelist", function (event) {
	var listitem=$(this);
	var path=listitem.attr('path');
	if (confirm("delete "+path+"?")) {
		$.get('/delete'+path,function (data) {
			removelinks(listitem);
			listitem.remove();
			alert("File/dir successfully deleted.");
		}).fail(function (jqXHR, textStatus, errorThrown) {
				alert("Error deleting file, "+textStatus+". "+jqXHR.responseText);
			}).always(function () {
			}).done(function (data) {
			});
	}
	event.preventDefault();
});
$(document).on('pagehide', '.filemanager', function (e, data) {
	var tid=$(this).attr('id');
	var nid=data.nextPage.attr('id');
	if (nid==='page') {
		removelinks($('#-'));
		$('#-').remove();
	} else if (tid.length>nid.length&&nid!=='log'&&nid!=='outlog') {
		removelinks($('#'+tid));
		$('#'+tid).remove();
	}
});
$(document).on('pagebeforechange', function (e, data) {
	var u;
	if (typeof data.toPage==="string") {
		u=$.mobile.path.parseUrl(data.toPage);
		if (u.hash.indexOf('#-')!==0||$(u.hash).length>0) {
			return;
		}
	} else
		return;
	var path=u.hash.substr(1).replace(/-/g, '/');
	$.mobile.loading('show', {text:'Loading...', textVisible:true});
	$.getJSON('/cgi-bin/files.json?root='+path,function (f) {
		createPage(u.hash.substr(1), f.files);
		data.options.dataUrl=u.href;
		$.mobile.changePage(u.hash, data.options);
		e.preventDefault();
	}).always(function () {
			$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			alert(jqXHR.responseText);
		}).done(function (f) {
		});
});
$('#log').on('pagebeforeshow', function (e) {
	$('#loglist').empty().listview('refresh');
}).on('pageshow', function (e) {
	loadlog();
});
$('#csetup').on('pageinit', function (e) {
	$('#contentaction').hide();
	$('#contentmisc').hide();
	$('#contentpumps').hide();
	$('#contentpwmfans').hide();
	$('#contentdosers').hide();
	$('#contentsensors').hide();
	$('#contentleds').hide();
	$('#contentoutlet').show();
}).on('pageshow', function (e, data) {
	if (data.prevPage[0].id=='page') {
		config={};
		macropage();
	}
});
$(document).on('tap', '.logfile, .outlogfile, .actionline', function (e) {
	var listitem=$(this);
	logpath=listitem.attr('path');
});
$('#selectrec').on('change', function (e, ui) {
	var i=parseInt($(this).val());
	$('#initoff').val(secsToTime(macros[i].iof));
	$('#ontime').val(secsToTime(macros[i].ont));
	$('#offtime').val(secsToTime(macros[i].oft));
	$('#cycletime').val(secsToTime(parseInt(macros[i].iof)+parseInt(macros[i].ont)+parseInt(macros[i].oft)));
	var sdays=[];
	var intdays=parseInt(macros[i].d);
	for (var j=1; j<=7; j++) {
		if (intdays>>j&0x01) {
			sdays.push(""+j);
		}
	}
	$('#days').val(sdays).selectmenu('refresh');
	$('#mode').val(macros[i].m).selectmenu('refresh');
	$('#inverse').prop('checked',  macros[i].d&0x01).checkboxradio('refresh');
});
$('#selectmacro').on('change', function (e) {
	var i=parseInt($(this).val());
	$('#actionlist').empty();
	action=config.actions[i];
	$.each(action, function (i, action) {
		var divblocka=$('<div class="ui-block-a">'+(action.out<8?outletname[action.out]:(action.out==20?"Feeder":(action.out==30?"Jebao":"End")) )+'</div>');
		var divblockb=$('<div class="ui-block-b">'+action.iof+'</div>');
		var divblockc=$('<div class="ui-block-c">'+action.ont+'</div>');
		var sec=$('<section class="ui-grid-b">');
		sec.append(divblocka, divblockb, divblockc);
		var alnk=$('<a href="#editaction" data-rel="dialog"/>').append(sec);
		var olist=$('<li path="'+i+'"/>');
		olist.append(alnk).addClass('actionline');
		$('#actionlist').append(olist);
	});
	$('#actionlist').listview('refresh');
});
$('#editaction').on('pagebeforeshow', function (e) {
	var i=parseInt(logpath);
	$('#editoutlet').val(action[i].out);
	$('#editoff').val(action[i].iof);
	$('#editon').val(action[i].ont);
});
$('#days').on('change', function (e) {
	var d=0;
	$.each($(this).val(), function (i, v) {
		d=d|1<<parseInt(v);
	});
	var sel=parseInt($('#selectrec').val());
	macros[sel].d=d;
});
$('#inverse').on('change', function (e) {
	var sel=parseInt($('#selectrec').val());
  if (this.checked)
		macros[sel].d|=1;
	else
    macros[sel].d&=0xFE;
});
$('#mode').on('change', function (e) {
	var sel=parseInt($('#selectrec').val());
	macros[sel].m=$(this).val();
	console.log($(this).val());
});
$('#initoff').on('change', function (e) {
	var sel=parseInt($('#selectrec').val());
	macros[sel].iof=timeToSecs($(this).val());
	console.log($(this).val());
});
$('#ontime').on('change', function (e) {
	var sel=parseInt($('#selectrec').val());
	macros[sel].ont=timeToSecs($(this).val());
	console.log($(this).val());
});
$('#offtime').on('change', function (e) {
	var sel=parseInt($('#selectrec').val());
	macros[sel].oft=timeToSecs($(this).val());
	console.log($(this).val());
});
$('#resetconf').on('change', function (e) {
	config.misc.init=parseInt($('#resetconf').val());
});
$('#htrlow').on('change', function (e) {
	config.misc.hl=parseFloat($('#htrlow').val());
});
$('#htrhigh').on('change', function (e) {
	config.misc.hh=parseFloat($('#htrhigh').val());
});
$('#fanlow').on('change', function (e) {
	config.misc.fl=parseFloat($('#fanlow').val());
});
$('#fanhigh').on('change', function (e) {
	config.misc.fh=parseFloat($('#fanhigh').val());
});
$('#sonarlow').on('change', function (e) {
	config.misc.sl=parseInt($('#sonarlow').val());
});
$('#sonarhigh').on('change', function (e) {
	config.misc.sh=parseInt($('#sonarhigh').val());
});
$('#sonaralertval').on('change', function (e) {
	config.misc.sav=parseInt($('#sonaralertval').val());
});
$('#sonaralert').on('change', function (e) {
	config.misc.sa=this.checked?"true":"false";
});
$('#sndalert').on('change', function (e) {
	config.misc.snda=this.checked?"true":"false";
});
$('#emailalert').on('change', function (e) {
	config.misc.ema=this.checked?"true":"false";
});
$('#_dosername').on('change', function(e){
	config.dosers[doseridx].n=$('#_dosername').val();
})
$('#_doserdd').on('change', function(e){
	config.dosers[doseridx].dd=$('#_doserdd').val();
})
$('#_doserdpd').on('change', function(e){
	config.dosers[doseridx].dpd=$('#_doserdpd').val();
})
$('#_doserint').on('change', function(e){
	config.dosers[doseridx].i=$('#_doserint').val();
})
$('#_doserst').on('change', function(e){
	config.dosers[doseridx].st=timeToMins($('#_doserst').val());
})
$('#_doserfv').on('change', function(e){
	config.dosers[doseridx].fv=$('#_doserfv').val();
})
$('#pumpnav').on('click', 'li a', function(e){
	pwmpumpsidx = $(this).closest('li').index();
	updateprogramlist();
	$.each($('#pumpnav').find('a'),function(i,obj){
		$(this).removeClass('ui-state-persist').removeClass('ui-btn-active');
	})
	$(this).addClass('ui-state-persist').addClass('ui-btn-active');
//	e.preventDefault();
});
$('#dosernav').on('click', 'li a', function(e){
	doseridx = $(this).closest('li').index();
	updateDoserSetupFields();
	$.each($('#dosernav').find('a'),function(i,obj){
		$(this).removeClass('ui-state-persist').removeClass('ui-btn-active');
	})
	$(this).addClass('ui-state-persist').addClass('ui-btn-active');
})
$('#_dosercalibrate').on('pagebeforeshow', function(e){
	$('#_dosercalibratehdr').html("Doser "+doseridx);
	$('#_dosercalvol').val(5);
	$('#_dosercaltime').val(980);
	$('#_dosercaltotaltime').val(0);
	$('#_dosercalstart').button('enable');
	$('#_dosercaladjust').button('disable');
	$('#_dosercalsave').button('disable');
	$('#_dosercaltest').button('disable');
	$('#_dosercalabort').button('disable');
}).on('pagebeforehide', function(e){
	doserCommand('cabort');
})
$('#_sensorlowalert').on('change',function(e){
	config.alerts[sensoridx].l=$('#_sensorlowalert').val();
});
$('#_sensorhighalert').on('change',function(e){
	config.alerts[sensoridx].h=$('#_sensorhighalert').val();
})
$('#sensornav').on('click', 'li a', function(e){
	sensoridx = $(this).closest('li').index();
	clearTimeout(csutilfunction);
	updateSensorSetupFields();
	$.each($('#sensornav').find('a'),function(i,obj){
		$(this).removeClass('ui-state-persist').removeClass('ui-btn-active');
	})
	$(this).addClass('ui-state-persist').addClass('ui-btn-active');
})
$('#pwmfannav').on('click', 'li a', function(e){
	pwmfanidx=$(this).closest('li').index();
	updatePwmFanSetupFields();
	$.each($('#pwmfannav').find('a'),function(i,obj){
		$(this).removeClass('ui-state-persist').removeClass('ui-btn-active');
	})
	$(this).addClass('ui-state-persist').addClass('ui-btn-active');
})
$('#_fanname').on('change', function(e){
	config.pwmfans[pwmfanidx].n=this.value;
})
$('#_fanmaxrpm').on('change',function(e){
	config.pwmfans[pwmfanidx].mr=this.value;
})
$('#_fantemp').on('change', function(e){
	config.pwmfans[pwmfanidx].ts=this.value;
})
$('#_pwmfancontent').on('slidestop', $("input[type=range]"), function(event, ui){
	var id = event.target.id;
	var val = event.target.value;
	if (id=="_fantemplow") {
		config.pwmfans[pwmfanidx].tl=val;
	} else if (id=="_fantemphigh") {
		config.pwmfans[pwmfanidx].th=val;
	} else if (id=="_fanlevellow") {
		config.pwmfans[pwmfanidx].ll=val;
	} else if (id=="_fanlevelhigh") {
		config.pwmfans[pwmfanidx].lh=val;
	}
})
$('#_fanalarm').on('change',function(e){
	config.pwmfans[pwmfanidx].a=this.checked?"true":"false";
})
$('#csform').on('pagebeforecreate', function(e) {
	if (config.pumps.length==4){
		$('#pumpnav').html('<ul><li><a href="#" class="ui-btn-active ui-state-persist" id="pumpnav0">Pump 0</a> </li>\
		<li><a href="#" id="pumpnav1">Pump 1</a> </li>\
		<li><a href="#" id="pumpnav2">Pump 2</a> </li>\
		<li><a href="#" id="pumpnav3">Pump 3</a> </li></ul>').navbar();
	} else if (config.pumps.length==2) {
		$('#pumpnav').html('<ul><li><a href="#" class="ui-btn-active ui-state-persist" id="pumpnav0">Pump 0</a> </li>\
		<li><a href="#" id="pumpnav1">Pump 1</a> </li></ul>').navbar();
	} else if (config.pumps.length==0) {
		$('#contentpumps').html("<h1>No pumps defined.</h1>")
	}
	if (config.dosers.length==0){
		$('#contentdosers').html("<h1>No dosers defined.</h1>")
	}	else {
		if (config.dosers.length<4)
			$("#dosernav3").parent("li").remove();
		if (config.dosers.length<3)
			$("#dosernav2").parent("li").remove();
		if (config.dosers.length<2)
			$('#dosernav1').parent("li").remove();
	}
	if (config.alerts.length==0){
		$('#contentsensors').html("<h1>No sensors defined.</h1>")
	} else {
		var ul = '<ul>';
		var tempnum = 0;
		var phnum = 0;
		var firstsensor = true;
		for (var r in config.alerts){
			var alert = config.alerts[r];
			switch (parseInt(alert.t)) {
			case 0: //temp
				ul+='<li><a href="#" ';
				ul+=(firstsensor?'class="ui-btn-active ui-state-persist"':'');
				ul+=' id="sensornav';
				ul+=r;
				ul+='">Temp ';
				ul+=tempnum++;
				ul+='</a></li>';
				numtemp++;
				break;
			case 1: //ph
				ul+='<li><a href="#" ';
				ul+=(firstsensor?'class="ui-btn-active ui-state-persist"':'');
				ul+=' id="sensornav';
				ul+=r;
				ul+='">pH ';
				ul+=phnum++;
				ul+='</a></li>';
				break;
			case 2: //orp
				ul+='<li><a href="#" ';
				ul+=(firstsensor?'class="ui-btn-active ui-state-persist"':'');
				ul+=' id="sensornav';
				ul+=r;
				ul+='">Orp</a></li>';
				break;
			case 3: //cond
				ul+='<li><a href="#" ';
				ul+=(firstsensor?'class="ui-btn-active ui-state-persist"':'');
				ul+=' id="sensornav';
				ul+=r;
				ul+='">Cond</a></li>';
				break;
			}
			firstsensor=false;
		}
		ul+='</ul>';
		$('#sensornav').html(ul).navbar();
	}
	if (config.pwmfans.length==0){
		$('#contentpwmfans').html("<h1>No PWM Fans defined.</h1>")
	} else {
		if (config.pwmfans.length<3)
		  $("#pwmfannav2").parent("li").remove();
		if (config.pwmfans.length<2)
			$("#pwmfannav1").parent("li").remove();
	}
}).on('pagehide', function(e, data) {
	if (data.nextPage[0].id=='pumpprogramedit' || data.nextPage[0].id=='editaction') return;
	csitem=-1;
	pwmpumpsidx=0;
	sensoridx=0;
	pwmfanidx=0;
	clearTimeout(csutilfunction);
}).on('pagebeforeshow', function (e,data) {
	clearTimeout(csutilfunction);
	switch (csitem) {
	case 0:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentleds').hide();
		$('#contentoutlets').show();
		$('#csformhdr').html("Outlets Setup");
		macros=config.outlets;
		$('#selectrec').empty();
		$.each(macros, function (i, macro) {
			$('#selectrec').append('<option value="'+i+'">'+macro.n+'</option>');
		});
		$('#selectrec').val('0').selectmenu('refresh').trigger('change');
		break;
	case 1:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').show();
		$('#csformhdr').html("Macros Setup");
		macros=config.macros;
		$('#selectrec').empty();
		$.each(macros, function (i, macro) {
			$('#selectrec').append('<option value="'+i+'">'+macro.n+'</option>');
		});
		$('#selectrec').val('0').selectmenu('refresh').trigger('change');
		break;
	case 2:
		if (data.prevPage[0].id=='editaction') break;
		$('#contentactions').show();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#csformhdr').html("Actions Setup");
		macros=config.macros;
		$.each(config.outlets, function(i, outlet) {
			outletname[i]=outlet.n;
		});
		$('#selectmacro').empty();
		$.each(macros, function (i, macro) {
			$('#selectmacro').append('<option value="'+i+'">'+macro.n+'</option>');
		});
		$('#selectmacro').val('0').selectmenu('refresh').trigger('change');
		break;
	case 3:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#contentpumps').show();
		$('#contentpwmfans').hide();
		$('#csformhdr').html("PWM Pumps");
		$('#pumpnav'+pwmpumpsidx).trigger('click');
		break;
	case 4:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').show();
		$('#csformhdr').html("PWM Fans");
		$('#pwmfannav'+pwmfanidx).trigger('click');
		break;
	case 5:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').show();
		$('#dosernav'+doseridx).trigger('click');
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#csformhdr').html("Dosers Setup");
		break;
	case 6:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentsensors').show();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#csformhdr').html("Sensor Setup");
		$('#sensornav'+sensoridx).trigger('click');
		break;
	case 7:
		$('#contentactions').hide();
		$('#contentmisc').hide();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').show();
		$('#contentoutlets').hide();
		$('#csformhdr').html("LEDs Setup");
		break;
	case 8:
		$('#contentactions').hide();
		$('#contentmisc').show();
		$('#contentpumps').hide();
		$('#contentpwmfans').hide();
		$('#contentdosers').hide();
		$('#contentsensors').hide();
		$('#contentleds').hide();
		$('#contentoutlets').hide();
		$('#csformhdr').html("Misc Setup");
		$('#htrlow').val(config.misc.hl);
		$('#htrhigh').val(config.misc.hh);
		$('#fanlow').val(config.misc.fl);
		$('#fanhigh').val(config.misc.fh);
		$('#sonarlow').val(config.misc.sl);
		$('#sonarhigh').val(config.misc.sh);
		$('#sonaralertval').val(config.misc.sav);
		$('#sonaralert').attr("checked", config.misc.sa=="true").checkboxradio("refresh");
		$('#sndalert').attr("checked", config.misc.snda=="true").checkboxradio("refresh");
		$('#emailalert').attr("checked", config.misc.ema=="true").checkboxradio("refresh");
		$('#resetconf').val(config.misc.init);
		if (hassonar)
			csutil({'cmd':'getval','type':'4','value':'0'});
		break;
	}
});
$('#pumpprogramedit').on('pagebeforeshow', function(e){
	$('#_level').on('slidestop', function(e){
		updatepumpprogrameditpage(e);
	});
	$('#_pulsewidth').on('slidestop', function(e){
		updatepumpprogrameditpage(e);
	});
	var sm = config.pumps[pwmpumpsidx][pwmpumpspgmitem].sm;
	$('#_syncmode').val(sm).selectmenu(pwmpumpsidx==0?'disable':'enable').selectmenu('refresh');
	$('#_wavemode').val(config.pumps[sm==0?pwmpumpsidx:0][pwmpumpspgmitem].wm).selectmenu(sm==0?'enable':'disable').selectmenu('refresh');
	$('#_pulsewidth').val(config.pumps[sm==0?pwmpumpsidx:0][pwmpumpspgmitem].pw).slider(sm==0?'enable':'disable').slider('refresh');
	var pct = config.pumps[sm==0?pwmpumpsidx:0][pwmpumpspgmitem].l;
	if (pct==255) pct=100; else pct=pct*100/255;
	pct=pct.toFixed(0);
	$('#_level').val(pct).slider(sm==0?'enable':'disable').slider('refresh');
}).on('change', '#_pulsewidth, #_level,  #_wavemode, #_syncmode', function (e,ui){
		if (e.target.id=='_pulsewidth' ||e.target.id=='_level') {
			if (e.originalEvent === undefined) return;
		}
		updatepumpprogrameditpage(e);
});
$('#pumpprogramlist').on('click', 'li a', function(e){
	pwmpumpspgmitem = $(this).closest('li').index();
})
function updatepumpprogrameditpage(e){
	var tmp=e.target.value;
	if (e.target.id=='_level') {
		if (tmp==100) tmp=255; else  tmp=parseInt(tmp)*255/100;
		tmp=tmp.toFixed(0);
		if (tmp==config.pumps[pwmpumpsidx][pwmpumpspgmitem].l)return;
		config.pumps[pwmpumpsidx][pwmpumpspgmitem].l=tmp;
	} else if (e.target.id=='_pulsewidth') {
		if (tmp==config.pumps[pwmpumpsidx][pwmpumpspgmitem].pw) return;
		config.pumps[pwmpumpsidx][pwmpumpspgmitem].pw=tmp;
	} else if (e.target.id=='_wavemode') {
		if (tmp==config.pumps[pwmpumpsidx][pwmpumpspgmitem].wm) return;
		config.pumps[pwmpumpsidx][pwmpumpspgmitem].wm=tmp;
	} else if (e.target.id=='_syncmode') {
		if (tmp==config.pumps[pwmpumpsidx][pwmpumpspgmitem].sm) return;
		config.pumps[pwmpumpsidx][pwmpumpspgmitem].sm=tmp;
	}
}
function updateprogramlist(){
	$('#pumpprogramlist').empty();
	for (var j=0;j<6;j++) {
		var _sm = config.pumps[pwmpumpsidx][j].sm;
		var sec = $('<section class="ui-grid-c"/>');
		var diva = $('<div class="ui-block-a">'+getWaveName(config.pumps[_sm==0?pwmpumpsidx:0][j].wm)+'</div>');
		var divb = $('<div class="ui-block-b">'+getSyncModeName(_sm,true)+'</div>');
		var divc = $('<div class="ui-block-c">'+getSpeedPCT(config.pumps[_sm==0?pwmpumpsidx:0][j].l)+'</div>');
		var divd = $('<div class="ui-block-d">'+config.pumps[_sm==0?pwmpumpsidx:0][j].pw+'</div>');
		var a = $('<a href="#pumpprogramedit" data-rel="dialog"/>');
		sec.append(diva,divb,divc,divd);
		a.append(sec);
		var item = $('<li/>');
		item.append(a);
		$('#pumpprogramlist').append(item);
	}
	$('#pumpprogramlist').listview('refresh');
}
function savePumpProgram(){
	updateprogramlist();
	$('#pumpprogramedit').dialog('close');
}
function pwmfan(param){
	clearTimeout(csutilfunction);
	csutilfunction=null;
	$.ajax('pwmfan.json', {
		data:JSON.stringify(param),
		contentType:'application/json',
		type:'POST'}).always(function () {
			csutilfunction=csutil({"cmd":"getval","type":"5"});
		}).done(function (data, textStatus, jqXHR) {
		}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
		});
}
function csutil(param){
	$.ajax('csutil.json',{
		data:JSON.stringify(param),
		contentType:'application/json',
	  type:'POST'}).always(function(){
		}).done(function(data, textStatus, jqXHR){
			if (param.cmd=='getval'){
				switch (parseInt(param.type)){
				case 1:
					$('#_sensorphvalue').val(parseFloat(data.value).toFixed(2));
					break;
				case 2:
					$('#_sensororpvalue').val(parseFloat(data.value).toFixed(0));
					break;
				case 3:
					$('#_sensorcondvalue').val(parseFloat(data.value).toFixed(0));
					break;
				case 4:
					$('#sonarval').val(data.value);
					break;
				case 5:
					if (pwmfansopen && csutilfunction!=null){
						$.each(data.value, function (i, rec) {
							var data = $('#canvasfan'+i).data();
							data.gauge.set(parseInt(rec.r));
							$('#fanlevel'+i).val(rec.l).slider("refresh");
							$('#fanauto'+i).prop('checked', rec.m=="0").checkboxradio("refresh");
							$('#fanmanual'+i).prop('checked', rec.m=="1").checkboxradio("refresh");
							$('#statusfan'+i).html(parseFloat(rec.t).toFixed(1));
						});
					}
					break;
				}
			} else {
				alert(jqXHR.responseText);
			}
		}).fail(function(jqXHR, textStatus, errorThrown) {
			console.log('CS call failed. '+textStatus);
		}).always(function(data, textStatus, errorThrown) {
			if (param.cmd!='getval')
				return;
			if (param.type==5 && pwmfansopen==false)
				return;
			if (param.type<4 && param.type!=config.alerts[sensoridx].t)
				return;
			if (param.type==1 && param.value!=(sensoridx-numtemp))
				return;
			csutilfunction=setTimeout(function(){csutil(param);},1000);
		})
}
function removelinks(id) {
	$.each(id.find('.direntry'), function (i, lnk) {
		var item=$($(lnk).attr('href'));
		removelinks(item);
		item.remove();
	});
}
function createPage(id, files) {
	var pagesel=id;
	var listsel=id+'-list';
	var total=0;
	var basepath=id.replace(/-/g, "/");
	var p=$('<div data-role="page" id="'+pagesel+'"/>');
	var h=$('<div data-role="header" data-position="fixed" data-tap-toggle="false"/>');
	var c=$('<div data-role="content"/>');
	var l=$('<ul data-role="listview" id="'+listsel+'" />');
	var f=$('<div data-role="footer" data-position="fixed"  data-tap-toggle="false"/>');
	h.append($('<h1>'+basepath+'</h1>'));
	h.append($('<a data-role="button" href="#page" data-icon="home" data-direction="reverse" data-iconpos="notext" data-iconshadow="false" class="ui-btn-right"/>'));
	f.append($('<h1 id="'+pagesel+'-footer"/>'));
	c.append(l);
	p.addClass('filemanager');
	p.append(h, c, f);
	p.appendTo($.mobile.pageContainer);
	$.mobile.initializePage();
	$.each(files, function (i, file) {
		var list=$('<li  class="filelist" path="'+basepath+file.n+'"/>');
		var filesize=parseInt(file.s, 10);
		if (filesize== -1) {
			var l=$('<a href="#'+id+file.n+'-" class="direntry">'+file.n+'</a>');
			list.append(l);
		} else {
			var divblocka=$('<div >'+file.n+'</div>');
			var divblockb=$('<div class="ui-li-aside">'+file.s+'</div>');
			total+=filesize;
			if (file.n.indexOf('.LOG')!= -1) {
				var a=$('<a href="#log"/>');
				a.append(divblocka, divblockb);
				list.addClass('logfile');
				list.append(a);
			} else if (pagesel.indexOf('-OUT')==0&&file.n.indexOf('.TXT')!= -1) {
				var a=$('<a href="#outlog"/>');
				a.append(divblocka, divblockb);
				list.addClass('outlogfile');
				list.append(a);
			} else {
				list.append(divblocka, divblockb);
			}
		}
		$('#'+listsel).append(list);
	});
	$('#'+pagesel+'-footer').html('Total Size = '+total);
	$('#'+listsel).trigger('create');
}
function loadlog() {
	$.mobile.loading('show', {text:'Loading...', textVisible:true});
	if (logpath=="") {
		var t=new Date();
		logpath="/LOG/"+t.getFullYear()+'/'+checkTime(t.getMonth()+1)+'/'+checkTime(t.getDate())+'.LOG';
	}
	$.get(logpath,function (data) {
		var loglines=data.split("\n");
		$.each(loglines, function (i, line) {
			var l=$('<li>'+line.substr(11)+'</li>');
			$('#loglist').append(l);
		});
		$('#logfooter').html(logpath);
		$('#loglist').listview('refresh');
		logpath="";
	}).done(function (data) {
		}).fail(function (jqXHR, textStatus, errorThrown) {
			alert(textStatus);
			history.back();
		}).always(function () {
			$.mobile.loading('hide');
			logpath="";
		});
}
function saveaction() {
	var i=parseInt(logpath);
	action[i].out=$('#editoutlet').val();
	action[i].iof=$('#editoff').val();
	action[i].ont=$('#editon').val();
	$('#editaction').dialog('close');
	i = $('#selectmacro').val();
	$('#selectmacro').val(i).trigger('change');
}
function saveconfig() {
	$.mobile.loading('show', {text:'Saving config...', textVisible:true});
	var datastr;
	var name;
	switch (csitem){
	case 0:
		name="outlets";
		datastr = '{"outlets":'+JSON.stringify(config.outlets)+'}';
		break;
	case 1:
		name="macros";
		datastr = '{"macros":'+JSON.stringify(config.macros)+'}';
		break;
	case 2:
		name="actions";
		datastr = '{"actions":'+JSON.stringify(config.actions)+'}';
		break;
	case 3:
		name="pwm pumps";
		datastr = '{"pumps":'+JSON.stringify(config.pumps)+'}';
		break;
	case 4:
		name="pwmfans";
		datastr = '{"pwmfans":'+JSON.stringify(config.pwmfans)+'}';
		break;
	case 5:
		name="dosers";
		datastr = '{"dosers":'+JSON.stringify(config.dosers)+'}';
		break;
	case 6:
		name="alerts";
		datastr = '{"alerts":'+JSON.stringify(config.alerts)+'}';
		break;
	case 7:
		name="leds";
		datastr = '{"leds":'+JSON.stringify(config.leds)+'}';
		break;
	case 8:
		name="misc";
		datastr = '{"misc":'+JSON.stringify(config.misc)+'}';
		break;
	}
	$.ajax("config.json", {
		data:datastr,
		contentType:"application/json",
		type:'POST'}).always(function () {
			$.mobile.loading('hide');
		}).done(function () {
			console.log("saveconfig done");
			alert("config "+name+" updated successfully");
			history.back();
		}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
			alert(textStatus);
		});
}
function macropage() {
	var initstring="Loading";
	if (retry>0) {
		initstring=initstring+" "+retry;
	}
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	$.getJSON("config.json",function (data) {
		config=data.config;
	}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
			if (textStatus==='parseerror') {
				alert('xml parse error');
				retry=0;
				history.back();
				return;
			}
			if (retry>=maxretries) {
				alert('unable to connect to apex.');
				retry=0;
				history.back();
				return;
			}
			retry++;
			setTimeout(macropage, 1);
		}).always(function () {
			$.mobile.loading('hide');
		}).done(function (data) {
			retry=0;
		});
}
function minsToTime(mins) {
	return checkTime(Math.floor(mins/60))+":"+checkTime(mins%60);
}
function secsToTime(secs) {
	return checkTime(Math.floor(secs/3600))+":"+checkTime(Math.floor((secs%3600)/60))+":"+checkTime((secs%3600)%60);
}
function timeToMins(time) {
	var mins=0;
	$.each(time.split(":"), function (i, rec) {
		mins+=parseInt(rec)*Math.pow(60, 1-i);
	});
	return mins;
}
function timeToSecs(time) {
	var secs=0;
	$.each(time.split(":"), function (i, rec) {
		secs+=parseInt(rec)*Math.pow(60, 2-i);
	});
	return secs;
}
function loadfileoutlog() {
	if (logpath==="") {
		console.log("no path specified");
		alert("no out log file specified");
		return;
	}
	var initstring="Loading";
	if (retry>0) {
		initstring=initstring+" "+retry;
	}
	initstring+="...";
	$.mobile.loading('show', {text:initstring, textVisible:true});
	var sdate=logpath.substring(7, 9)+logpath.substring(10, 12)+logpath.substring(13, 15)+"0000";
	logpath="";
	$.get("/cgi-bin/outlog.xml?sdate="+sdate+"&days=1",function (data) {
		var records=data.getElementsByTagName("record");
		$.each(records, function (i, rec) {
			var divblocka=$('<div class="ui-block-a">'+rec.getElementsByTagName("date")[0].childNodes[0].nodeValue+'</div>');
			var divblockb=$('<div class="ui-block-b">'+rec.getElementsByTagName("name")[0].childNodes[0].nodeValue+'</div>');
			var divblockc=$('<div class="ui-block-c">'+rec.getElementsByTagName("value")[0].childNodes[0].nodeValue+'</div>');
			var sec=$('<section class="ui-grid-b">');
			sec.append(divblocka, divblockb, divblockc);
			var olist=$('<li/>');
			olist.append(sec);
			$('#outloglist').append(olist);
		});
		$('#outloglist').listview('refresh');
		logpath="";
	}).always(function () {
			$.mobile.loading('hide');
		}).fail(function (jqXHR, textStatus, errorThrown) {
			console.log(textStatus);
			if (textStatus==='parseerror') {
				alert('xml parse error');
				retry=0;
				return;
			}
			if (retry>=maxretries) {
				alert('unable to connect to apex.');
				retry=0;
				return;
			}
			retry++;
			setTimeout(loadfileoutlog, 1);
		}).done(function (f) {
			retry=0;
		});
}
</script>
</body>
</html>
